-- Load transaction data into table
copy emdeon_dx_raw from :input_path credentials :credentials BZIP2 EMPTYASNULL FILLRECORD;

-- Load matching payload data into table
copy matching_payload from :matching_path credentials :credentials BZIP2 format as JSON 's3://healthveritydev/ifishbein/payloadpaths.json';

-- Select medical claim data (column2 = 'C') from the transactions table and insert the first 111 columns into the claims table. A claim row only consists of 111 columns
-- Drop column2 (record type), we won't need it anymore
-- Normalize gender in column 25 (patient_gender in claims) to 'M', 'F', or 'U'
-- Normalize numeric columns (column55 => total_charge, column56 => total_allowed)
-- Normalize date columns (column5 => date_received, column92 => inst_date_admitted)
INSERT INTO emdeon_dx_raw_claims SELECT column1,
column3,
column4,
CASE WHEN char_length(column5) >= 8 THEN regexp_replace(column5, '(....)(..)(..)', '\\1-\\2-\\3') ELSE NULL END,
column6,
column7,
column8,
column9,
column10,
column11,
column12,
column13,
column14,
column15,
column16,
column17,
column18,
column19,
column20,
column21,
column22,
column23,
column24,
CASE WHEN UPPER(column25) = 'M' OR column25 = '1' THEN 'M' WHEN UPPER(column25) = 'F' OR column25 = '2' THEN 'F' ELSE 'U' END,
column26,
column27,
column28,
column29,
column30,
column31,
column32,
column33,
column34,
column35,
column36,
column37,
column38,
column39,
column40,
column41,
column42,
column43,
column44,
column45,
column46,
column47,
column48,
column49,
column50,
column51,
column52,
column53,
column54,
CASE WHEN regexp_count(column55, '\\.') = 0 THEN regexp_replace(column55, '[^0-9]', '') WHEN regexp_count(column55, '\\.') = 1 THEN regexp_replace(regexp_replace(column55, '[^0-9.]', ''), '^\\.$', '') ELSE regexp_replace(column55, '[^0-9]', '') END,
CASE WHEN regexp_count(column56, '\\.') = 0 THEN regexp_replace(column56, '[^0-9]', '') WHEN regexp_count(column56, '\\.') = 1 THEN regexp_replace(regexp_replace(column56, '[^0-9.]', ''), '^\\.$', '') ELSE regexp_replace(column56, '[^0-9]', '') END,
column57,
column58,
column59,
column60,
column61,
column62,
column63,
column64,
column65,
column66,
column67,
column68,
column69,
column70,
column71,
column72,
column73,
column74,
column75,
column76,
column77,
column78,
column79,
column80,
column81,
column82,
column83,
column84,
column85,
column86,
column87,
column88,
column89,
column90,
column91,
CASE WHEN char_length(column92) >= 8 THEN regexp_replace(column92, '(....)(..)(..)', '\\1-\\2-\\3') ELSE NULL END,
column93,
column94,
column95,
column96,
column97,
column98,
column99,
column100,
column101,
column102,
column103,
column104,
column105,
column106,
column107,
column108,
column109,
column110,
column111
FROM emdeon_dx_raw WHERE column2 = 'C';

-- Select medical service data (column2 = 'S') from the transactions table and insert the first 42 columns into the services table. A service row only consists of 42 columns
-- Drop column2 (record type), we won't need it anymore
-- Normalize numeric columns (column13 => line_charge, column14 => line_allowed, column15 => procedure_units)
-- Normalize date columns (column4 => date_service, column5 => date_service_ends)
INSERT INTO emdeon_dx_raw_service SELECT column1,
column3,
CASE WHEN char_length(column4) >= 8 THEN regexp_replace(column4, '(....)(..)(..)', '\\1-\\2-\\3') ELSE NULL END,
CASE WHEN char_length(column5) >= 8 THEN regexp_replace(column5, '(....)(..)(..)', '\\1-\\2-\\3') ELSE NULL END,
column6,
column7,
column8,
column9,
column10,
column11,
column12,
CASE WHEN regexp_count(column13, '\\.') = 0 THEN regexp_replace(column13, '[^0-9]', '') WHEN regexp_count(column13, '\\.') = 1 THEN regexp_replace(regexp_replace(column13, '[^0-9.]', ''), '^\\.$', '') ELSE regexp_replace(column13, '[^0-9]', '') END,
CASE WHEN regexp_count(column14, '\\.') = 0 THEN regexp_replace(column14, '[^0-9]', '') WHEN regexp_count(column14, '\\.') = 1 THEN regexp_replace(regexp_replace(column14, '[^0-9.]', ''), '^\\.$', '') ELSE regexp_replace(column14, '[^0-9]', '') END,
CASE WHEN regexp_count(column15, '\\.') = 0 THEN regexp_replace(column15, '[^0-9]', '') WHEN regexp_count(column15, '\\.') = 1 THEN regexp_replace(regexp_replace(column15, '[^0-9.]', ''), '^\\.$', '') ELSE regexp_replace(column15, '[^0-9]', '') END,
column16,
column17,
column18,
column19,
column20,
column21,
column22,
column23,
column24,
column25,
column26,
column27,
column28,
column29,
column30,
column31,
column32,
column33,
column34,
column35,
column36,
column37,
column38,
column39,
column40,
column41,
column42
FROM emdeon_dx_raw WHERE column2 = 'S';

-- Select medical diagnosis data (column2 = 'D') from the transactions table and insert the first 99 columns into the diagnoses table. A diagnosis row consists of all 171 columns, but only the first 99 are relevant for us
-- Drop column2 (record type), we won't need it anymore
INSERT INTO emdeon_dx_raw_diagnosis SELECT column1,
column3,
column4,
column5,
column6,
column7,
column8,
column9,
column10,
column11,
column12,
column13,
column14,
column15,
column16,
column17,
column18,
column19,
column20,
column21,
column22,
column23,
column24,
column25,
column26,
column27,
column28,
column29,
column30,
column31,
column32,
column33,
column34,
column35,
column36,
column37,
column38,
column39,
column40,
column41,
column42,
column43,
column44,
column45,
column46,
column47,
column48,
column49,
column50,
column51,
column52,
column53,
column54,
column55,
column56,
column57,
column58,
column59,
column60,
column61,
column62,
column63,
column64,
column65,
column66,
column67,
column68,
column69,
column70,
column71,
column72,
column73,
column74,
column75,
column76,
column77,
column78,
column79,
column80,
column81,
column82,
column83,
column84,
column85,
column86,
column87,
column88,
column89,
column90,
column91,
column92,
column93,
column94,
column95,
column96,
column97,
column98,
column99
FROM emdeon_dx_raw WHERE column2 = 'D';

INSERT INTO emdeon_professional_claims_base SELECT emdeon_dx_raw_claims.claim_id AS claim_id,
accident_related,
adjudicated_proc_modifier_1,
adjudicated_proc_modifier_2,
adjudicated_proc_modifier_3,
adjudicated_proc_modifier_4,
adjudicated_procedure,
adjudicated_procedure_qual,
admission_hour,
amb_hosp_to_hosp,
amb_nurse_to_diag,
amb_nurse_to_hosp,
ambulance_to_hosp,
assignment_sign,
bene_not_entitled,
claim_filing_ind_cd,
claim_type,
cob_group_name_1,
cob_group_name_2,
cob_group_policy_nbr_1,
cob_group_policy_nbr_2,
cob_ins_type_code_1,
cob_ins_type_code_2,
cob_payer_claim_filing_ind_code_1,
cob_payer_claim_filing_ind_code_2,
cob_payer_hpid_1,
cob_payer_hpid_2,
cob_payer_id_1,
cob_payer_id_2,
cob_payer_name_1,
cob_payer_name_2,
cob_payer_seq_code_1,
cob_payer_seq_code_2,
cob_relationship_cd_1,
cob_relationship_cd_2,
contract_allow_ind,
copay,
date_paid,
date_received,
date_service,
date_service_end,
diagnosis_code_qual,
(COALESCE(primary_diagnosis,
'')  || ':' || COALESCE(diagnosis_code_2,
'')  || ':' || COALESCE(diagnosis_code_3,
'')  || ':' || COALESCE(diagnosis_code_4,
'')  || ':' || COALESCE(diagnosis_code_5,
'')  || ':' || COALESCE(diagnosis_code_6,
'')  || ':' || COALESCE(diagnosis_code_7,
'')  || ':' || COALESCE(diagnosis_code_8,
'')  || ':' || COALESCE(diagnosis_code_9,
'')  || ':' || COALESCE(diagnosis_code_10,
'')  || ':' || COALESCE(diagnosis_code_11,
'')  || ':' || COALESCE(diagnosis_code_12,
'')  || ':' || COALESCE(diagnosis_code_13,
'')  || ':' || COALESCE(diagnosis_code_14,
'')  || ':' || COALESCE(diagnosis_code_15,
'')  || ':' || COALESCE(diagnosis_code_16,
'')  || ':' || COALESCE(diagnosis_code_17,
'')  || ':' || COALESCE(diagnosis_code_18,
'')  || ':' || COALESCE(diagnosis_code_19,
'')  || ':' || COALESCE(diagnosis_code_20,
'')  || ':' || COALESCE(diagnosis_code_21,
'')  || ':' || COALESCE(diagnosis_code_22,
'')  || ':' || COALESCE(diagnosis_code_23,
'')  || ':' || COALESCE(diagnosis_code_24,
'')  || ':' || COALESCE(diagnosis_code_25,
'')  || ':' || COALESCE(admit_diagnosis,
'')),
(COALESCE(diagnosis_pointer_1,
'')  || ':' || COALESCE(diagnosis_pointer_2,
'')  || ':' || COALESCE(diagnosis_pointer_3,
'')  || ':' || COALESCE(diagnosis_pointer_4,
'')  || ':' || COALESCE(diagnosis_pointer_5,
'')  || ':' || COALESCE(diagnosis_pointer_6,
'')  || ':' || COALESCE(diagnosis_pointer_7,
'')  || ':' || COALESCE(diagnosis_pointer_8,
'')),
get_diagnosis_with_priority((COALESCE(primary_diagnosis,
'')  || ':' || COALESCE(diagnosis_code_2,
'')  || ':' || COALESCE(diagnosis_code_3,
'')  || ':' || COALESCE(diagnosis_code_4,
'')  || ':' || COALESCE(diagnosis_code_5,
'')  || ':' || COALESCE(diagnosis_code_6,
'')  || ':' || COALESCE(diagnosis_code_7,
'')  || ':' || COALESCE(diagnosis_code_8,
'')  || ':' || COALESCE(diagnosis_code_9,
'')  || ':' || COALESCE(diagnosis_code_10,
'')  || ':' || COALESCE(diagnosis_code_11,
'')  || ':' || COALESCE(diagnosis_code_12,
'')  || ':' || COALESCE(diagnosis_code_13,
'')  || ':' || COALESCE(diagnosis_code_14,
'')  || ':' || COALESCE(diagnosis_code_15,
'')  || ':' || COALESCE(diagnosis_code_16,
'')  || ':' || COALESCE(diagnosis_code_17,
'')  || ':' || COALESCE(diagnosis_code_18,
'')  || ':' || COALESCE(diagnosis_code_19,
'')  || ':' || COALESCE(diagnosis_code_20,
'')  || ':' || COALESCE(diagnosis_code_21,
'')  || ':' || COALESCE(diagnosis_code_22,
'')  || ':' || COALESCE(diagnosis_code_23,
'')  || ':' || COALESCE(diagnosis_code_24,
'')  || ':' || COALESCE(diagnosis_code_25,
'')  || ':' || COALESCE(admit_diagnosis,
'')),
(COALESCE(diagnosis_pointer_1,
'')  || ':' || COALESCE(diagnosis_pointer_2,
'')  || ':' || COALESCE(diagnosis_pointer_3,
'')  || ':' || COALESCE(diagnosis_pointer_4,
'')  || ':' || COALESCE(diagnosis_pointer_5,
'')  || ':' || COALESCE(diagnosis_pointer_6,
'')  || ':' || COALESCE(diagnosis_pointer_7,
'')  || ':' || COALESCE(diagnosis_pointer_8,
''))) as related,
dialysis_related,
discharge_hour,
electronic_claim,
emergency,
esrd_patient,
explanation_code,
group_name,
hosp_admis_or_er,
in_out_network,
initial_procedure,
inst_admit_source_std_id,
inst_admit_type_std_id,
inst_date_admitted,
inst_discharge_status_std_id,
inst_drg_std_id,
inst_type_of_bill_std_id,
line_allowed,
line_charge,
medical_coverage_type,
member_adr_city,
member_adr_line1,
member_adr_line2,
member_adr_state,
member_adr_zip,
member_dob,
member_fname,
member_gender,
member_id,
member_lname,
ndc_code,
new_patient,
not_covrd_specialt,
operating_pr_commercial,
operating_pr_first_name,
operating_pr_last_name,
operating_pr_location,
operating_pr_middle_name,
operating_pr_npi,
operating_pr_org_name,
operating_pr_state_lic,
operating_pr_upin,
oral_cavity,
oth_operating_pr_commercial,
oth_operating_pr_first_name,
oth_operating_pr_last_name,
oth_operating_pr_location,
oth_operating_pr_middle_name,
oth_operating_pr_npi,
oth_operating_pr_org_name,
oth_operating_pr_state_lic,
oth_operating_pr_upin,
paid_amount,
patient_age,
patient_control,
patient_dob,
patient_fname,
patient_gender,
patient_id,
patient_lname,
patient_reach_max,
patient_relation,
pay_to_plan_address_1,
pay_to_plan_address_2,
pay_to_plan_city,
pay_to_plan_clm_ofc_number,
pay_to_plan_naic_id,
pay_to_plan_name,
pay_to_plan_payer_id,
pay_to_plan_plan_id,
pay_to_plan_state,
pay_to_plan_tax_id,
pay_to_plan_zip,
pay_to_prov_address_1,
pay_to_prov_address_2,
pay_to_prov_city,
pay_to_prov_state,
pay_to_prov_zip,
payer_name,
payer_vendor_id,
place_of_service_std_id,
procedure_code,
procedure_code_qual,
procedure_modifier_1,
procedure_modifier_2,
procedure_modifier_3,
procedure_modifier_4,
procedure_units,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_npi,
prov_billing_ssn,
prov_billing_state,
prov_billing_state_license,
prov_billing_std_taxonomy,
prov_billing_tax_id,
prov_billing_upin,
prov_billing_zip,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_npi,
prov_facility_state,
prov_facility_state_license,
prov_facility_tax_id,
prov_facility_zip,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
prov_referring_npi,
prov_referring_state_license,
prov_referring_tax_id,
prov_referring_upin,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_npi,
prov_rendering_state_license,
prov_rendering_std_taxonomy,
prov_rendering_tax_id,
prov_rendering_upin,
prov_specialty,
release_sign,
revenue_code,
service_line_number,
statement_from,
statement_to,
sub_client_id,
supervising_pr_commercial,
supervising_pr_first_name,
supervising_pr_last_name,
supervising_pr_location,
supervising_pr_middle_name,
supervising_pr_npi,
supervising_pr_org_name,
supervising_pr_state_lic,
supervising_pr_upin,
svc_during_postop,
tooth_number,
tooth_surface,
total_allowed,
total_charge,
type_service
FROM emdeon_dx_raw_claims
    LEFT JOIN emdeon_dx_raw_diagnosis USING (claim_id)
    INNER JOIN emdeon_dx_raw_service USING (claim_id)
WHERE claim_type='P';

INSERT INTO final_output (claim_id,
hvid,
patient_gender,
patient_age,
patient_year_of_birth,
patient_zip3,
patient_state,
claim_type,
date_received,
date_service,
date_service_end,
inst_date_admitted,
inst_admit_type_std_id,
inst_admit_source_std_id,
inst_discharge_status_std_id,
inst_type_of_bill_std_id,
inst_drg_std_id,
place_of_service_std_id,
service_line_number,
diagnosis_code,
diagnosis_code_qual,
diagnosis_priority,
procedure_code,
procedure_code_qual,
procedure_units,
procedure_modifier_1,
procedure_modifier_2,
procedure_modifier_3,
procedure_modifier_4,
revenue_code,
ndc_code,
medical_coverage_type,
line_charge,
line_allowed,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_vendor_id,
payer_name,
prov_rendering_tax_id,
prov_rendering_upin,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_std_taxonomy,
prov_rendering_vendor_specialty,
prov_billing_tax_id,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
prov_referring_tax_id,
prov_referring_state_license,
prov_referring_upin,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
prov_facility_tax_id,
prov_facility_state_license,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
cob_payer_vendor_id_1,
cob_payer_seq_code_1,
cob_payer_hpid_1,
cob_payer_claim_filing_ind_code_1,
cob_ins_type_code_1,
cob_payer_vendor_id_2,
cob_payer_seq_code_2,
cob_payer_hpid_2,
cob_payer_claim_filing_ind_code_2,
cob_ins_type_code_2)
SELECT b.claim_id,
hvid,
patient_gender,
patient_age,
patient_dob as patient_year_of_birth,
threedigitzip as patient_zip3,
state as patient_state,
claim_type,
date_received,
date_service,
date_service_end,
inst_date_admitted,
inst_admit_type_std_id,
inst_admit_source_std_id,
inst_discharge_status_std_id,
inst_type_of_bill_std_id,
inst_drg_std_id,
place_of_service_std_id,
service_line_number,
upper(ltrim(rtrim(split_part(split_part(related,':',n),'_',1)))) as diagnosis_code,
diagnosis_code_qual,
split_part(split_part(related,':',n),'_',2) as diagnosis_priority,
upper(ltrim(rtrim(procedure_code))) as procedure_code,
procedure_code_qual,
procedure_units,
procedure_modifier_1,
procedure_modifier_2,
procedure_modifier_3,
procedure_modifier_4,
revenue_code,
ndc_code,
medical_coverage_type,
line_charge,
line_allowed,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_vendor_id,
payer_name,
prov_rendering_tax_id,
prov_rendering_upin,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_std_taxonomy,
prov_specialty as prov_rendering_vendor_specialty,
prov_billing_tax_id,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
prov_referring_tax_id,
prov_referring_state_license,
prov_referring_upin,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
prov_facility_tax_id,
prov_facility_state_license,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
cob_payer_id_1 as cob_payer_vendor_id_1,
cob_payer_seq_code_1,
cob_payer_hpid_1,
cob_payer_claim_filing_ind_code_1,
cob_ins_type_code_1,
cob_payer_id_2 as cob_payer_vendor_id_2,
cob_payer_seq_code_2,
cob_payer_hpid_2,
cob_payer_claim_filing_ind_code_2,
cob_ins_type_code_2
FROM emdeon_professional_claims_base b
    CROSS JOIN split_indices
    LEFT JOIN matching_payload ON b.claim_id = claimid
    LEFT JOIN zip3_to_state ON threeDigitZip = zip3
WHERE split_part(related,':',n) IS NOT NULL AND split_part(related,':',n) != '';

-- There can be a lot of raws with the same diagnosis. Only extract unique ones
INSERT INTO related_diags_tmp
SELECT DISTINCT claim_id, related
FROM emdeon_professional_claims_base;

INSERT INTO related_diags
SELECT claim_id, listagg(related,':') within group (order by related) AS related
FROM related_diags_tmp GROUP BY claim_id;

INSERT INTO emdeon_professional_claims_unrelated
SELECT accident_related,
admission_hour,
amb_hosp_to_hosp,
amb_nurse_to_diag,
amb_nurse_to_hosp,
assignment_sign,
e.claim_id,
claim_type,
contract_allow_ind,
date_received,
diagnosis_code_qual,
dialysis_related,
discharge_hour,
electronic_claim,
esrd_patient,
explanation_code,
group_name,
hosp_admis_or_er,
in_out_network,
initial_procedure,
inst_admit_source_std_id,
inst_admit_type_std_id,
inst_date_admitted,
inst_discharge_status_std_id,
inst_drg_std_id,
inst_type_of_bill_std_id,
medical_coverage_type,
member_adr_city,
member_adr_line1,
member_adr_line2,
member_adr_state,
member_adr_zip,
member_dob,
member_fname,
member_gender,
member_id,
member_lname,
new_patient,
not_covrd_specialt,
patient_age,
patient_control,
patient_dob,
patient_fname,
patient_gender,
patient_id,
patient_lname,
patient_relation,
payer_name,
payer_vendor_id,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_npi,
prov_billing_ssn,
prov_billing_state,
prov_billing_state_license,
prov_billing_std_taxonomy,
prov_billing_tax_id,
prov_billing_upin,
prov_billing_zip,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_npi,
prov_facility_state,
prov_facility_state_license,
prov_facility_tax_id,
prov_facility_zip,
prov_referring_name_1,
prov_referring_name_2,
prov_referring_npi,
prov_referring_tax_id,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_npi,
prov_rendering_state_license,
prov_rendering_std_taxonomy,
prov_rendering_tax_id,
prov_rendering_upin,
prov_specialty,
release_sign,
statement_from,
statement_to,
sub_client_id,
tooth_number,
total_allowed,
total_charge,
date_service,
date_service as date_service_end,
string_set_diff(diag_concat,
rd.related) as unrelated 
FROM emdeon_professional_claims_base e 
    INNER JOIN related_diags rd USING (claim_id) 
WHERE service_line_number = '1';

INSERT INTO final_output (claim_id,
hvid,
patient_gender,
patient_age,
patient_year_of_birth,
patient_zip3,
patient_state,
claim_type,
date_received,
date_service,
date_service_end,
inst_date_admitted,
inst_admit_type_std_id,
inst_admit_source_std_id,
inst_discharge_status_std_id,
inst_type_of_bill_std_id,
inst_drg_std_id,
diagnosis_code,
diagnosis_code_qual,
medical_coverage_type,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_vendor_id,
payer_name,
prov_rendering_tax_id,
prov_rendering_upin,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_std_taxonomy,
prov_rendering_vendor_specialty,
prov_billing_tax_id,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
prov_referring_tax_id,
prov_referring_name_1,
prov_referring_name_2,
prov_facility_tax_id,
prov_facility_state_license,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip)
SELECT b.claim_id,
hvid,
patient_gender,
patient_age,
patient_dob as patient_year_of_birth,
threeDigitZip as patient_zip3,
state as patient_state,
claim_type,
date_received,
date_service,
date_service_end,
inst_date_admitted,
inst_admit_type_std_id,
inst_admit_source_std_id,
inst_discharge_status_std_id,
inst_type_of_bill_std_id,
inst_drg_std_id,
UPPER(LTRIM(RTRIM(split_part(unrelated,':',n)))) AS diagnosis_code,
diagnosis_code_qual,
medical_coverage_type,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_vendor_id,
payer_name,
prov_rendering_tax_id,
prov_rendering_upin,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_std_taxonomy,
prov_specialty AS prov_rendering_vendor_specialty,
prov_billing_tax_id,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
prov_referring_tax_id,
prov_referring_name_1,
prov_referring_name_2,
prov_facility_tax_id,
prov_facility_state_license,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip
FROM emdeon_professional_claims_unrelated b
    CROSS JOIN split_indices
    LEFT JOIN matching_payload ON b.claim_id = claimid
    LEFT JOIN zip3_to_state ON threeDigitZip = zip3
WHERE split_part(unrelated,':',n) IS NOT NULL AND split_part(unrelated,':',n) != '';

DROP TABLE IF EXISTS emdeon_institutional_claims_extended;
SELECT * INTO emdeon_institutional_claims_extended
FROM emdeon_dx_raw_claims LEFT JOIN emdeon_dx_raw_diagnosis USING (claim_id)
WHERE claim_type = 'I';

DROP TABLE IF EXISTS emdeon_institutional_claims_all;
SELECT * INTO emdeon_institutional_claims_all
FROM emdeon_institutional_claims_extended 
    INNER JOIN emdeon_dx_raw_service USING (claim_id);

INSERT INTO final_output (claim_id,
hvid,
patient_gender,
patient_age,
patient_year_of_birth,
patient_zip3,
patient_state,
claim_type,
date_received,
date_service,
date_service_end,
inst_date_admitted,
inst_admit_type_std_id,
inst_admit_source_std_id,
inst_discharge_status_std_id,
inst_type_of_bill_std_id,
inst_drg_std_id,
place_of_service_std_id,
service_line_number,
diagnosis_code_qual,
procedure_code,
procedure_code_qual,
procedure_units,
procedure_modifier_1,
procedure_modifier_2,
procedure_modifier_3,
procedure_modifier_4,
revenue_code,
ndc_code,
medical_coverage_type,
line_charge,
line_allowed,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_vendor_id,
payer_name,
prov_rendering_tax_id,
prov_rendering_state_license,
prov_rendering_upin,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_std_taxonomy,
prov_rendering_vendor_specialty,
prov_billing_tax_id,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
prov_referring_tax_id,
prov_referring_state_license,
prov_referring_upin,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
prov_facility_tax_id,
prov_facility_state_license,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
cob_payer_vendor_id_1,
cob_payer_seq_code_1,
cob_payer_hpid_1,
cob_payer_claim_filing_ind_code_1,
cob_ins_type_code_1,
cob_payer_vendor_id_2,
cob_payer_seq_code_2,
cob_payer_hpid_2,
cob_payer_claim_filing_ind_code_2,
cob_ins_type_code_2)
SELECT b.claim_id,
hvid,
patient_gender,
patient_age,
patient_dob as patient_year_of_birth,
threeDigitZip as patient_zip3,
state as patient_state,
claim_type,
date_received,
date_service,
date_service_end,
inst_date_admitted,
inst_admit_type_std_id,
inst_admit_source_std_id,
inst_discharge_status_std_id,
inst_type_of_bill_std_id,
inst_drg_std_id,
place_of_service_std_id,
service_line_number,
diagnosis_code_qual,
UPPER(LTRIM(RTRIM(procedure_code))) AS procedure_code,
procedure_code_qual,
procedure_units,
procedure_modifier_1,
procedure_modifier_2,
procedure_modifier_3,
procedure_modifier_4,
revenue_code,
ndc_code,
medical_coverage_type,
line_charge,
line_allowed,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_vendor_id,
payer_name,
prov_rendering_tax_id,
prov_rendering_state_license,
prov_rendering_upin,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_std_taxonomy,
prov_specialty AS prov_rendering_vendor_specialty,
prov_billing_tax_id,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
prov_referring_tax_id,
prov_referring_state_license,
prov_referring_upin,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
prov_facility_tax_id,
prov_facility_state_license,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
cob_payer_id_1 AS cob_payer_vendor_id_1,
cob_payer_seq_code_1,
cob_payer_hpid_1,
cob_payer_claim_filing_ind_code_1,
cob_ins_type_code_1,
cob_payer_id_2 AS cob_payer_vendor_id_2,
cob_payer_seq_code_2,
cob_payer_hpid_2,
cob_payer_claim_filing_ind_code_2,
cob_ins_type_code_2
FROM emdeon_institutional_claims_all b
    LEFT JOIN matching_payload ON b.claim_id = claimId
    LEFT JOIN zip3_to_state ON threeDigitZip = zip3;

DROP TABLE IF EXISTS emdeon_institutional_claims_unrelated;
SELECT *, uniquify((COALESCE(primary_diagnosis, '')  || ':' || COALESCE(diagnosis_code_2, '')  || ':' || COALESCE(diagnosis_code_3, '')  || ':' || COALESCE(diagnosis_code_4, '')  || ':' || COALESCE(diagnosis_code_5, '')  || ':' || COALESCE(diagnosis_code_6, '')  || ':' || COALESCE(diagnosis_code_7, '')  || ':' || COALESCE(diagnosis_code_8, '')  || ':' || COALESCE(diagnosis_code_9, '')  || ':' || COALESCE(diagnosis_code_10, '')  || ':' || COALESCE(diagnosis_code_11, '')  || ':' || COALESCE(diagnosis_code_12, '')  || ':' || COALESCE(diagnosis_code_13, '')  || ':' || COALESCE(diagnosis_code_14, '')  || ':' || COALESCE(diagnosis_code_15, '')  || ':' || COALESCE(diagnosis_code_16, '')  || ':' || COALESCE(diagnosis_code_17, '')  || ':' || COALESCE(diagnosis_code_18, '')  || ':' || COALESCE(diagnosis_code_19, '')  || ':' || COALESCE(diagnosis_code_20, '')  || ':' || COALESCE(diagnosis_code_21, '')  || ':' || COALESCE(diagnosis_code_22, '')  || ':' || COALESCE(diagnosis_code_23, '')  || ':' || COALESCE(diagnosis_code_24, '')  || ':' || COALESCE(diagnosis_code_25, '')  || ':' || COALESCE(admit_diagnosis, ''))) as diag_concat INTO emdeon_institutional_claims_unrelated FROM emdeon_institutional_claims_extended;


INSERT INTO final_output (claim_id,
hvid,
patient_gender,
patient_age,
patient_year_of_birth,
patient_zip3,
patient_state,
claim_type,
date_received,
inst_date_admitted,
inst_admit_type_std_id,
inst_admit_source_std_id,
inst_discharge_status_std_id,
inst_type_of_bill_std_id,
inst_drg_std_id,
diagnosis_code,
diagnosis_code_qual,
medical_coverage_type,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_vendor_id,
payer_name,
prov_rendering_tax_id,
prov_rendering_state_license,
prov_rendering_upin,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_std_taxonomy,
prov_rendering_vendor_specialty,
prov_billing_tax_id,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
prov_referring_tax_id,
prov_referring_state_license,
prov_referring_upin,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
prov_facility_tax_id,
prov_facility_state_license,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
cob_payer_vendor_id_1,
cob_payer_seq_code_1,
cob_payer_hpid_1,
cob_payer_claim_filing_ind_code_1,
cob_ins_type_code_1,
cob_payer_vendor_id_2,
cob_payer_seq_code_2,
cob_payer_hpid_2,
cob_payer_claim_filing_ind_code_2,
cob_ins_type_code_2)
SELECT b.claim_id,
hvid,
patient_gender,
patient_age,
patient_dob as patient_year_of_birth,
threeDigitZip as patient_zip3,
state as patient_state,
claim_type,
date_received,
inst_date_admitted,
inst_admit_type_std_id,
inst_admit_source_std_id,
inst_discharge_status_std_id,
inst_type_of_bill_std_id,
inst_drg_std_id,
UPPER(LTRIM(RTRIM(split_part(diag_concat,':',n)))) AS diagnosis_code,
diagnosis_code_qual,
medical_coverage_type,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_vendor_id,
payer_name,
prov_rendering_tax_id,
prov_rendering_state_license,
prov_rendering_upin,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_std_taxonomy,
prov_specialty AS prov_rendering_vendor_specialty,
prov_billing_tax_id,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
prov_referring_tax_id,
prov_referring_state_license,
prov_referring_upin,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
prov_facility_tax_id,
prov_facility_state_license,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
cob_payer_id_1 AS cob_payer_vendor_id_1,
cob_payer_seq_code_1,
cob_payer_hpid_1,
cob_payer_claim_filing_ind_code_1,
cob_ins_type_code_1,
cob_payer_id_2 AS cob_payer_vendor_id_2,
cob_payer_seq_code_2,
cob_payer_hpid_2,
cob_payer_claim_filing_ind_code_2,
cob_ins_type_code_2
FROM emdeon_institutional_claims_unrelated b
    CROSS JOIN split_indices
    LEFT JOIN matching_payload ON b.claim_id = claimid
    LEFT JOIN zip3_to_state ON threeDigitZip = zip3
WHERE split_part(diag_concat,':',n) IS NOT NULL AND split_part(diag_concat,':',n) != '';

INSERT INTO together
SELECT a.claim_id, string_set_diff(unrelated_concat, related_concat) AS unrelated, principal_procedure_check
FROM
(SELECT claim_id, listagg(procedure_code, ':') within group (order by procedure_code) AS related_concat FROM emdeon_institutional_claims_all group by claim_id) a
INNER JOIN
(SELECT claim_id, principal_procedure as principal_procedure_check, (
COALESCE(principal_procedure, '') || ':' || COALESCE(other_proc_code_2, '') || ':' || COALESCE(other_proc_code_3, '') || ':' || COALESCE(other_proc_code_4, '') || ':' || COALESCE(other_proc_code_5, '') || ':' || COALESCE(other_proc_code_6, '') || ':' || COALESCE(other_proc_code_7, '') || ':' || COALESCE(other_proc_code_8, '') || ':' || COALESCE(other_proc_code_9, '') || ':' || COALESCE(other_proc_code_10, '') || ':' || COALESCE(other_proc_code_11, '') || ':' || COALESCE(other_proc_code_12, '') || ':' || COALESCE(other_proc_code_13, '') || ':' || COALESCE(other_proc_code_14, '') || ':' || COALESCE(other_proc_code_15, '') || ':' || COALESCE(other_proc_code_16, '') || ':' || COALESCE(other_proc_code_17, '') || ':' || COALESCE(other_proc_code_18, '') || ':' || COALESCE(other_proc_code_19, '') || ':' || COALESCE(other_proc_code_20, '') || ':' || COALESCE(other_proc_code_21, '') || ':' || COALESCE(other_proc_code_22, '') || ':' || COALESCE(other_proc_code_23, '') || ':' || COALESCE(other_proc_code_24, '') || ':' || COALESCE(other_proc_code_25, '') ) AS unrelated_concat
FROM 
emdeon_institutional_claims_unrelated) b USING (claim_id);

DROP TABLE emdeon_institutional_claims_unrelated_procs;
SELECT * INTO emdeon_institutional_claims_unrelated_procs
FROM together INNER JOIN emdeon_institutional_claims_unrelated USING (claim_id);

INSERT INTO final_output (claim_id,
hvid,
patient_gender,
patient_age,
patient_year_of_birth,
patient_zip3,
patient_state,
claim_type,
date_received,
inst_date_admitted,
inst_admit_type_std_id,
inst_admit_source_std_id,
inst_discharge_status_std_id,
inst_type_of_bill_std_id,
inst_drg_std_id,
diagnosis_code_qual,
procedure_code,
medical_coverage_type,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_vendor_id,
payer_name,
prov_rendering_tax_id,
prov_rendering_state_license,
prov_rendering_upin,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_std_taxonomy,
prov_rendering_vendor_specialty,
prov_billing_tax_id,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
prov_referring_tax_id,
prov_referring_state_license,
prov_referring_upin,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
prov_facility_tax_id,
prov_facility_state_license,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
cob_payer_vendor_id_1,
cob_payer_seq_code_1,
cob_payer_hpid_1,
cob_payer_claim_filing_ind_code_1,
cob_ins_type_code_1,
cob_payer_vendor_id_2,
cob_payer_seq_code_2,
cob_payer_hpid_2,
cob_payer_claim_filing_ind_code_2,
cob_ins_type_code_2)
SELECT b.claim_id,
hvid,
patient_gender,
patient_age,
patient_dob as patient_year_of_birth,
threeDigitZip as patient_zip3,
state as patient_state,
claim_type,
date_received,
inst_date_admitted,
inst_admit_type_std_id,
inst_admit_source_std_id,
inst_discharge_status_std_id,
inst_type_of_bill_std_id,
inst_drg_std_id,
diagnosis_code_qual,
UPPER(LTRIM(RTRIM(split_part(unrelated,':',n)))) AS procedure_code,
medical_coverage_type,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_vendor_id,
payer_name,
prov_rendering_tax_id,
prov_rendering_state_license,
prov_rendering_upin,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_std_taxonomy,
prov_specialty AS prov_rendering_vendor_specialty,
prov_billing_tax_id,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
prov_referring_tax_id,
prov_referring_state_license,
prov_referring_upin,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
prov_facility_tax_id,
prov_facility_state_license,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
cob_payer_id_1 AS cob_payer_vendor_id_1,
cob_payer_seq_code_1,
cob_payer_hpid_1,
cob_payer_claim_filing_ind_code_1,
cob_ins_type_code_1,
cob_payer_id_2 AS cob_payer_vendor_id_2,
cob_payer_seq_code_2,
cob_payer_hpid_2,
cob_payer_claim_filing_ind_code_2,
cob_ins_type_code_2
FROM emdeon_institutional_claims_unrelated_procs b
    CROSS JOIN split_indices
    LEFT JOIN matching_payload ON b.claim_id = claimid
    LEFT JOIN zip3_to_state ON threeDigitZip = zip3
WHERE split_part(unrelated,':',n) IS NOT NULL AND split_part(unrelated,':',n) != '';

UNLOAD('SELECT * FROM final_output') TO :output_path credentials :credentials BZIP2 DELIMITER '|' NULL AS '' ALLOWOVERWRITE;
