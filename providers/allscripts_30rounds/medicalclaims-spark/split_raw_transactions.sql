-- Create a table for medical claim data with only the columns we need for mapping
DROP TABLE IF EXISTS allscripts_dx_raw_claims;
CREATE TABLE allscripts_dx_raw_claims (
Create_Date string,
Version_Code string,
Entity_ID string,
Billing_or_Pay_To_Provider_Taxonomy_Code string,
Billing_Prov_Organization_Name_or_Billing_Prov_Last_Name string,
Billing_Prov_Last_Name string,
Billing_Prov_First_Name string,
Billing_Prov_MI string,
Billing_Prov_ID_Qual string,
Billing_Prov_Tax_ID string,
Billing_Prov_NPI string,
Billing_Provider_s_Address_1 string,
Billing_Provider_s_Address_2 string,
Billing_Provider_s_City string,
Billing_Provider_s_State string,
Billing_Provider_s_Zip string,
Insurance_Type_Code string,
Source_of_Payment string,
Patient_DOB string,
Patient_Sex string,
Primary_Payer_Name string,
Total_Claim_Charge_Amount string,
Diagnosis_Code_1 string,
Diagnosis_Code_2 string,
Diagnosis_Code_3 string,
Diagnosis_Code_4 string,
Diagnosis_Code_5 string,
Diagnosis_Code_6 string,
Diagnosis_Code_7 string,
Diagnosis_Code_8 string,
Referring_Provider_Last_Name string,
Referring_Provider_First_Name string,
Referring_Provider_Middle_Initial string,
Referring_Provider_Primary_ID_Qualifier string,
Referring_Provider_Primary_ID string,
Referring_Prov_NPI string,
Referring_Provider_Taxonomy_Code string,
Rendering_Provider_Last string,
Rendering_Provider_First string,
Rendering_Provider_Middle string,
Rendering_Provider_Primary_ID_Qualifier string,
Rendering_Provider_Primary_ID string,
Rendering_Provider_NPI string,
Rendering_Provider_Specialty_Code string,
Facility_Laboratory_Name string,
Facility_Lab_Primary_ID_Qualifier string,
Facility_Laboratory_Primary_Identifier string,
Facility_Lab_NPI string,
Facility_Laboratory_Street_Address_1 string,
Facility_Laboratory_Street_Address_2 string,
Facility_Laboratory_City string,
Facility_Laboratory_State string,
Facility_Laboratory_Zip_Code string,
Secondary_Payer_Sequence_Number string,
Secondary_Payer_Insurance_Type_Code string,
Secondary_Payer_Source_of_Payment string,
Teritary_Payer_Sequence_Number string,
Teritary_Payer_Insurance_Type_Code string,
Teritary_Payer_Source_of_Payment string,
Second_Payer_Primary_ID string,
Third_Payer_Primary_ID string
);

-- Create a table for medical service data with only the columns we need for mapping
DROP TABLE IF EXISTS allscripts_dx_raw_service;
CREATE TABLE allscripts_dx_raw_service (
Entity_ID string,
Charge_Line_Number string,
Std_Chg_Line_HCPCS_Procedure_Code string,
HCPCS_Modifier_1 string,
HCPCS_Modifier_2 string,
HCPCS_Modifier_3 string,
HCPCS_Modifier_4 string,
Line_Charges string,
Units_of_Service string,
Place_of_Service string,
Diagnosis_Code_Pointer_1 string,
Diagnosis_Code_Pointer_2 string,
Diagnosis_Code_Pointer_3 string,
Diagnosis_Code_Pointer_4 string,
Service_From_Date string,
Service_To_Date string,
NDC_CODE string,
Rendering_Provider_Last string,
Rendering_Provider_First string,
Rendering_Provider_Middle string,
Rendering_Provider_Tax_ID_Qual string,
Rendering_Provider_Primary_ID string,
Rendering_Provider_NPI string,
Rendering_Provider_Specialty_Code string,
Service_Facility_Name string,
Service_Facility_NPI string,
Service_Facility_Address_1 string,
Service_Facility_Address_2 string,
Service_Facility_City string,
Service_Facility_State string,
Service_Facility_Zip_Code string,
Referring_Provider_Last_Name string,
Referring_Provider_First_Name string,
Referring_Provider_MI string,
Referring_Provider_NPI string
);

-- Select medical claim data (column1 = 'H') from the transactions table and insert all necessary columns
-- Normalize gender in column 50 (patient_gender in claims) to 'M', 'F', or 'U'
-- Normalize numeric columns (column62 => total_charge, column48 => year_of_birth)
-- Normalize date columns (column4 => date_received)
INSERT INTO allscripts_dx_raw_claims SELECT
CASE WHEN column4 >= '20130101' AND column4 <= {max_allowed_date} THEN
    cast(cast(concat_ws('-', substring(column4, 1, 4), substring(column4, 5, 2), substring(column4, 7, 2)) as date) as string) ELSE NULL END,
CASE WHEN trim(column6) = '' THEN NULL ELSE column6 END AS column6,
CASE WHEN trim(column7) = '' THEN NULL ELSE column7 END AS column7,
CASE WHEN trim(column9) = '' THEN NULL ELSE column9 END AS column9,
CASE WHEN trim(column10) = '' THEN NULL ELSE column10 END AS column10,
CASE WHEN trim(column11) = '' THEN NULL ELSE column11 END AS column11,
CASE WHEN trim(column12) = '' THEN NULL ELSE column12 END AS column12,
CASE WHEN trim(column13) = '' THEN NULL ELSE column13 END AS column13,
CASE WHEN trim(column14) = '' THEN NULL ELSE column14 END AS column14,
CASE WHEN trim(column15) = '' THEN NULL ELSE column15 END AS column15,
CASE WHEN trim(column16) = '' THEN NULL ELSE column16 END AS column16,
CASE WHEN trim(column17) = '' THEN NULL ELSE column17 END AS column17,
CASE WHEN trim(column18) = '' THEN NULL ELSE column18 END AS column18,
CASE WHEN trim(column19) = '' THEN NULL ELSE column19 END AS column19,
CASE WHEN trim(column20) = '' THEN NULL ELSE column20 END AS column20,
CASE WHEN trim(column21) = '' THEN NULL ELSE column21 END AS column21,
CASE WHEN trim(column36) = '' THEN NULL ELSE column36 END AS column36,
CASE WHEN trim(column37) = '' THEN NULL ELSE column37 END AS column37,
CASE WHEN (length(column48)-length(regexp_replace(column48,'\\.',''))) = 1 THEN
cast(cast(regexp_replace(column48, '[^0-9.]', '') as double) as string)
ELSE cast(cast(regexp_replace(column48, '[^0-9]', '') as bigint) as string) END,
CASE WHEN UPPER(column50) = 'M' THEN 'M' WHEN UPPER(column50) = 'F' THEN 'F' ELSE 'U' END,
CASE WHEN trim(column54) = '' THEN NULL ELSE column54 END AS column54,
CASE WHEN (length(column62)-length(regexp_replace(column62,'\\.',''))) = 1 THEN
cast(cast(regexp_replace(column62, '[^0-9.]', '') as double) as string)
ELSE cast(cast(regexp_replace(column62, '[^0-9]', '') as bigint) as string) END,
CASE WHEN trim(column129) = '' THEN NULL ELSE column129 END AS column129,
CASE WHEN trim(column130) = '' THEN NULL ELSE column130 END AS column130,
CASE WHEN trim(column131) = '' THEN NULL ELSE column131 END AS column131,
CASE WHEN trim(column132) = '' THEN NULL ELSE column132 END AS column132,
CASE WHEN trim(column133) = '' THEN NULL ELSE column133 END AS column133,
CASE WHEN trim(column134) = '' THEN NULL ELSE column134 END AS column134,
CASE WHEN trim(column135) = '' THEN NULL ELSE column135 END AS column135,
CASE WHEN trim(column136) = '' THEN NULL ELSE column136 END AS column136,
CASE WHEN trim(column147) = '' THEN NULL ELSE column147 END AS column147,
CASE WHEN trim(column148) = '' THEN NULL ELSE column148 END AS column148,
CASE WHEN trim(column149) = '' THEN NULL ELSE column149 END AS column149,
CASE WHEN trim(column150) = '' THEN NULL ELSE column150 END AS column150,
CASE WHEN trim(column151) = '' THEN NULL ELSE column151 END AS column151,
CASE WHEN trim(column152) = '' THEN NULL ELSE column152 END AS column152,
CASE WHEN trim(column153) = '' THEN NULL ELSE column153 END AS column153,
CASE WHEN trim(column154) = '' THEN NULL ELSE column154 END AS column154,
CASE WHEN trim(column155) = '' THEN NULL ELSE column155 END AS column155,
CASE WHEN trim(column156) = '' THEN NULL ELSE column156 END AS column156,
CASE WHEN trim(column157) = '' THEN NULL ELSE column157 END AS column157,
CASE WHEN trim(column158) = '' THEN NULL ELSE column158 END AS column158,
CASE WHEN trim(column159) = '' THEN NULL ELSE column159 END AS column159,
CASE WHEN trim(column160) = '' THEN NULL ELSE column160 END AS column160,
CASE WHEN trim(column168) = '' THEN NULL ELSE column168 END AS column168,
CASE WHEN trim(column169) = '' THEN NULL ELSE column169 END AS column169,
CASE WHEN trim(column170) = '' THEN NULL ELSE column170 END AS column170,
CASE WHEN trim(column171) = '' THEN NULL ELSE column171 END AS column171,
CASE WHEN trim(column172) = '' THEN NULL ELSE column172 END AS column172,
CASE WHEN trim(column173) = '' THEN NULL ELSE column173 END AS column173,
CASE WHEN trim(column174) = '' THEN NULL ELSE column174 END AS column174,
CASE WHEN trim(column175) = '' THEN NULL ELSE column175 END AS column175,
CASE WHEN trim(column176) = '' THEN NULL ELSE column176 END AS column176,
CASE WHEN trim(column183) = '' THEN NULL ELSE column183 END AS column183,
CASE WHEN trim(column187) = '' THEN NULL ELSE column187 END AS column187,
CASE WHEN trim(column188) = '' THEN NULL ELSE column188 END AS column188,
CASE WHEN trim(column189) = '' THEN NULL ELSE column189 END AS column189,
CASE WHEN trim(column193) = '' THEN NULL ELSE column193 END AS column193,
CASE WHEN trim(column194) = '' THEN NULL ELSE column194 END AS column194,
CASE WHEN trim(column392) = '' THEN NULL ELSE column392 END AS column392,
CASE WHEN trim(column394) = '' THEN NULL ELSE column394 END AS column394
FROM allscripts_dx_raw
WHERE column1 = 'H'
CLUSTER BY column7;

-- Select medical service data (column1 = 'S') from the transactions table and insert the required columns into the service table
-- Normalize numeric columns (column9 => line_charge, column10 => procedure_units)
-- Normalize date columns (column57 => date_service, column58 => date_service_ends)
INSERT INTO allscripts_dx_raw_service SELECT
CASE WHEN trim(column2) = '' THEN NULL ELSE column2 END AS column2,
CASE WHEN trim(column3) = '' THEN NULL ELSE column3 END AS column3,
CASE WHEN trim(column4) = '' THEN NULL ELSE column4 END AS column4,
CASE WHEN trim(column5) = '' THEN NULL ELSE column5 END AS column5,
CASE WHEN trim(column6) = '' THEN NULL ELSE column6 END AS column6,
CASE WHEN trim(column7) = '' THEN NULL ELSE column7 END AS column7,
CASE WHEN trim(column8) = '' THEN NULL ELSE column8 END AS column8,
CASE WHEN (length(column9)-length(regexp_replace(column9,'\\.',''))) = 1 THEN
cast(cast(regexp_replace(column9, '[^0-9.]', '') as double) as string)
ELSE cast(cast(regexp_replace(column9, '[^0-9]', '') as bigint) as string) END,
CASE WHEN (length(column10)-length(regexp_replace(column10,'\\.',''))) = 1 THEN
cast(cast(regexp_replace(column10, '[^0-9.]', '') as double) as string)
ELSE cast(cast(regexp_replace(column10, '[^0-9]', '') as bigint) as string) END,
CASE WHEN trim(column12) = '' THEN NULL ELSE column12 END AS column12,
CASE WHEN trim(column13) = '' THEN NULL ELSE column13 END AS column13,
CASE WHEN trim(column14) = '' THEN NULL ELSE column14 END AS column14,
CASE WHEN trim(column15) = '' THEN NULL ELSE column15 END AS column15,
CASE WHEN trim(column16) = '' THEN NULL ELSE column16 END AS column16,
CASE WHEN column57 >= '20130101' AND column57 <= {max_allowed_date} THEN
    cast(cast(concat_ws('-', substring(column57, 1, 4), substring(column57, 5, 2), substring(column57, 7, 2)) as date) as string) ELSE NULL END,
CASE WHEN column58 >= '20130101' AND column58 <= {max_allowed_date} THEN
    cast(cast(concat_ws('-', substring(column58, 1, 4), substring(column58, 5, 2), substring(column58, 7, 2)) as date) as string) ELSE NULL END,
CASE WHEN trim(column104) = '' THEN NULL ELSE column104 END AS column104,
CASE WHEN trim(column109) = '' THEN NULL ELSE column109 END AS column109,
CASE WHEN trim(column110) = '' THEN NULL ELSE column110 END AS column110,
CASE WHEN trim(column111) = '' THEN NULL ELSE column111 END AS column111,
CASE WHEN trim(column112) = '' THEN NULL ELSE column112 END AS column112,
CASE WHEN trim(column113) = '' THEN NULL ELSE column113 END AS column113,
CASE WHEN trim(column114) = '' THEN NULL ELSE column114 END AS column114,
CASE WHEN trim(column115) = '' THEN NULL ELSE column115 END AS column115,
CASE WHEN trim(column118) = '' THEN NULL ELSE column118 END AS column118,
CASE WHEN trim(column119) = '' THEN NULL ELSE column119 END AS column119,
CASE WHEN trim(column120) = '' THEN NULL ELSE column120 END AS column120,
CASE WHEN trim(column121) = '' THEN NULL ELSE column121 END AS column121,
CASE WHEN trim(column122) = '' THEN NULL ELSE column122 END AS column122,
CASE WHEN trim(column123) = '' THEN NULL ELSE column123 END AS column123,
CASE WHEN trim(column124) = '' THEN NULL ELSE column124 END AS column124,
CASE WHEN trim(column138) = '' THEN NULL ELSE column138 END AS column138,
CASE WHEN trim(column139) = '' THEN NULL ELSE column139 END AS column139,
CASE WHEN trim(column140) = '' THEN NULL ELSE column140 END AS column140,
CASE WHEN trim(column141) = '' THEN NULL ELSE column141 END AS column141
FROM allscripts_dx_raw
WHERE column1 = 'S'
CLUSTER BY column2;
