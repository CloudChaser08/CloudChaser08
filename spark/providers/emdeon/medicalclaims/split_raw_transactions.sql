-- Select medical claim data (column2 = 'C') from the transactions table and insert the first 111 columns into the claims table. A claim row only consists of 111 columns
-- Drop column2 (record type), we won't need it anymore
-- Normalize gender in column 25 (patient_gender in claims) to 'M', 'F', or 'U'
-- Normalize numeric columns (column55 => total_charge, column56 => total_allowed)
-- Normalize date columns (column5 => date_received, column53 => statement_from, column54 => statement_to, column92 => inst_date_admitted)
-- Create a table for medical claim data
DROP TABLE IF EXISTS emdeon_dx_raw_claims;
CREATE TEMPORARY VIEW emdeon_dx_raw_claims AS SELECT
trim(column1) as claim_id,
trim(column3) as payer_vendor_id,
trim(column4) as diagnosis_code_qual,
extract_date(column5, '%Y%m%d', cast({min_date} as date), cast({max_date} as date)) as date_received,
trim(column6) as claim_type,
trim(column7) as contract_allow_ind,
trim(column8) as payer_name,
trim(column9) as sub_client_id,
trim(column10) as group_name,
trim(column11) as member_id,
trim(column12) as member_fname,
trim(column13) as member_lname,
trim(column14) as member_gender,
trim(column15) as member_dob,
trim(column16) as member_adr_line1,
trim(column17) as member_adr_line2,
trim(column18) as member_adr_city,
trim(column19) as member_adr_state,
trim(column20) as member_adr_zip,
trim(column21) as patient_id,
trim(column22) as patient_relation,
trim(column23) as patient_fname,
trim(column24) as patient_lname,
CASE WHEN UPPER(column25) = 'M' OR column25 = '1' THEN 'M' WHEN UPPER(column25) = 'F' OR column25 = '2' THEN 'F' ELSE 'U' END as patient_gender,
trim(column26) as patient_dob,
trim(column27) as patient_age,
trim(column28) as prov_billing_tax_id,
trim(column29) as prov_billing_npi,
trim(column30) as prov_billing_name_1,
trim(column31) as prov_billing_name_2,
trim(column32) as prov_billing_address_1,
trim(column33) as prov_billing_address_2,
trim(column34) as prov_billing_city,
trim(column35) as prov_billing_state,
trim(column36) as prov_billing_zip,
trim(column37) as prov_referring_tax_id,
trim(column38) as prov_referring_npi,
trim(column39) as prov_referring_name_1,
trim(column40) as prov_referring_name_2,
trim(column41) as prov_rendering_tax_id,
trim(column42) as prov_rendering_npi,
trim(column43) as prov_rendering_name_1,
trim(column44) as prov_rendering_name_2,
trim(column45) as prov_facility_tax_id,
trim(column46) as prov_facility_name_1,
trim(column47) as prov_facility_name_2,
trim(column48) as prov_facility_address_1,
trim(column49) as prov_facility_address_2,
trim(column50) as prov_facility_city,
trim(column51) as prov_facility_state,
trim(column52) as prov_facility_zip,
extract_date(column53, '%Y%m%d', cast({min_date} as date), cast({max_date} as date)) as statement_from,
extract_date(column54, '%Y%m%d', cast({min_date} as date), cast({max_date} as date)) as statement_to,
extract_number(column55) as total_charge,
extract_number(column56) as total_allowed,
trim(column57) as inst_drg_std_id,
trim(column58) as patient_control,
trim(column59) as inst_type_of_bill_std_id,
trim(column60) as release_sign,
trim(column61) as assignment_sign,
trim(column62) as in_out_network,
trim(column63) as principal_procedure,
trim(column64) as admit_diagnosis,
trim(column65) as primary_diagnosis,
trim(column66) as diagnosis_code_2,
trim(column67) as diagnosis_code_3,
trim(column68) as diagnosis_code_4,
trim(column69) as diagnosis_code_5,
trim(column70) as diagnosis_code_6,
trim(column71) as diagnosis_code_7,
trim(column72) as diagnosis_code_8,
trim(column73) as other_proc_code_2,
trim(column74) as other_proc_code_3,
trim(column75) as other_proc_code_4,
trim(column76) as other_proc_code_5,
trim(column77) as other_proc_code_6,
trim(column78) as prov_specialty,
trim(column79) as medical_coverage_type,
trim(column80) as explanation_code,
trim(column81) as accident_related,
trim(column82) as esrd_patient,
trim(column83) as hosp_admis_or_er,
trim(column84) as amb_nurse_to_hosp,
trim(column85) as not_covrd_specialt,
trim(column86) as electronic_claim,
trim(column87) as dialysis_related,
trim(column88) as new_patient,
trim(column89) as initial_procedure,
trim(column90) as amb_nurse_to_diag,
trim(column91) as amb_hosp_to_hosp,
extract_date(column92, '%Y%m%d', cast({min_date} as date), cast({max_date} as date)) as inst_date_admitted,
trim(column93) as admission_hour,
trim(column94) as inst_admit_type_std_id,
trim(column95) as inst_admit_source_std_id,
trim(column96) as discharge_hour,
trim(column97) as inst_discharge_status_std_id,
trim(column98) as tooth_number,
trim(column99) as other_proc_code_7,
trim(column100) as other_proc_code_8,
trim(column101) as other_proc_code_9,
trim(column102) as other_proc_code_10,
trim(column103) as prov_billing_std_taxonomy,
trim(column104) as prov_billing_state_license,
trim(column105) as prov_billing_upin,
trim(column106) as prov_billing_ssn,
trim(column107) as prov_rendering_std_taxonomy,
trim(column108) as prov_rendering_state_license,
trim(column109) as prov_rendering_upin,
trim(column110) as prov_facility_npi,
trim(column111) as prov_facility_state_license
FROM emdeon_dx_raw_local
WHERE part_record_type = 'C'
CLUSTER BY claim_id;

-- Select medical service data (column2 = 'S') from the transactions table and insert the first 42 columns into the services table. A service row only consists of 42 columns
-- Drop column2 (record type), we won't need it anymore
-- Normalize numeric columns (column13 => line_charge, column14 => line_allowed, column15 => procedure_units)
-- Normalize date columns (column4 => date_service, column5 => date_service_ends)
-- Create a table for medical service data
DROP TABLE IF EXISTS emdeon_dx_raw_service;
CREATE TEMPORARY VIEW emdeon_dx_raw_service AS SELECT
trim(column1) as claim_id,
trim(column3) as service_line_number,
extract_date(column4, '%Y%m%d', cast({min_date} as date), cast({max_date} as date)) as date_service,
extract_date(column5, '%Y%m%d', cast({min_date} as date), cast({max_date} as date)) as date_service_end,
trim(column6) as place_of_service_std_id,
trim(column7) as procedure_code,
trim(column8) as procedure_code_qual,
trim(column9) as procedure_modifier_1,
trim(column10) as procedure_modifier_2,
trim(column11) as procedure_modifier_3,
trim(column12) as procedure_modifier_4,
extract_number(column13) as line_charge,
extract_number(column14) as line_allowed,
extract_number(column15) as procedure_units,
trim(column16) as revenue_code,
trim(column17) as diagnosis_pointer_1,
trim(column18) as diagnosis_pointer_2,
trim(column19) as diagnosis_pointer_3,
trim(column20) as diagnosis_pointer_4,
trim(column21) as diagnosis_pointer_5,
trim(column22) as diagnosis_pointer_6,
trim(column23) as diagnosis_pointer_7,
trim(column24) as diagnosis_pointer_8,
trim(column25) as ndc_code,
trim(column26) as ambulance_to_hosp,
trim(column27) as emergency,
trim(column28) as tooth_surface,
trim(column29) as oral_cavity,
trim(column30) as type_service,
trim(column31) as copay,
trim(column32) as paid_amount,
trim(column33) as date_paid,
trim(column34) as bene_not_entitled,
trim(column35) as patient_reach_max,
trim(column36) as svc_during_postop,
trim(column37) as adjudicated_procedure,
trim(column38) as adjudicated_procedure_qual,
trim(column39) as adjudicated_proc_modifier_1,
trim(column40) as adjudicated_proc_modifier_2,
trim(column41) as adjudicated_proc_modifier_3,
trim(column42) as adjudicated_proc_modifier_4
FROM emdeon_dx_raw_local
WHERE part_record_type = 'S'
CLUSTER BY claim_id;
    

-- Select medical diagnosis data (column2 = 'D') from the transactions table and insert the first 99 columns into the diagnoses table. A diagnosis row consists of all 171 columns, but only the first 99 are relevant for us
-- Drop column2 (record type), we won't need it anymore
-- Create a table for medical diagnosis data
DROP TABLE IF EXISTS emdeon_dx_raw_diagnosis;
CREATE TEMPORARY VIEW emdeon_dx_raw_diagnosis AS SELECT
trim(column1) as claim_id,
trim(column3) as diagnosis_code_9,
trim(column4) as diagnosis_code_10,
trim(column5) as diagnosis_code_11,
trim(column6) as diagnosis_code_12,
trim(column7) as diagnosis_code_13,
trim(column8) as diagnosis_code_14,
trim(column9) as diagnosis_code_15,
trim(column10) as diagnosis_code_16,
trim(column11) as diagnosis_code_17,
trim(column12) as diagnosis_code_18,
trim(column13) as diagnosis_code_19,
trim(column14) as diagnosis_code_20,
trim(column15) as diagnosis_code_21,
trim(column16) as diagnosis_code_22,
trim(column17) as diagnosis_code_23,
trim(column18) as diagnosis_code_24,
trim(column19) as diagnosis_code_25,
trim(column20) as other_proc_code_11,
trim(column21) as other_proc_code_12,
trim(column22) as other_proc_code_13,
trim(column23) as other_proc_code_14,
trim(column24) as other_proc_code_15,
trim(column25) as other_proc_code_16,
trim(column26) as other_proc_code_17,
trim(column27) as other_proc_code_18,
trim(column28) as other_proc_code_19,
trim(column29) as other_proc_code_20,
trim(column30) as other_proc_code_21,
trim(column31) as other_proc_code_22,
trim(column32) as other_proc_code_23,
trim(column33) as other_proc_code_24,
trim(column34) as other_proc_code_25,
trim(column35) as claim_filing_ind_cd,
trim(column36) as prov_referring_state_license,
trim(column37) as prov_referring_upin,
trim(column38) as prov_referring_commercial_id,
trim(column39) as pay_to_prov_address_1,
trim(column40) as pay_to_prov_address_2,
trim(column41) as pay_to_prov_city,
trim(column42) as pay_to_prov_zip,
trim(column43) as pay_to_prov_state,
trim(column44) as supervising_pr_org_name,
trim(column45) as supervising_pr_last_name,
trim(column46) as supervising_pr_first_name,
trim(column47) as supervising_pr_middle_name,
trim(column48) as supervising_pr_npi,
trim(column49) as supervising_pr_state_lic,
trim(column50) as supervising_pr_upin,
trim(column51) as supervising_pr_commercial,
trim(column52) as supervising_pr_location,
trim(column53) as operating_pr_org_name,
trim(column54) as operating_pr_last_name,
trim(column55) as operating_pr_first_name,
trim(column56) as operating_pr_middle_name,
trim(column57) as operating_pr_npi,
trim(column58) as operating_pr_state_lic,
trim(column59) as operating_pr_upin,
trim(column60) as operating_pr_commercial,
trim(column61) as operating_pr_location,
trim(column62) as oth_operating_pr_org_name,
trim(column63) as oth_operating_pr_last_name,
trim(column64) as oth_operating_pr_first_name,
trim(column65) as oth_operating_pr_middle_name,
trim(column66) as oth_operating_pr_npi,
trim(column67) as oth_operating_pr_state_lic,
trim(column68) as oth_operating_pr_upin,
trim(column69) as oth_operating_pr_commercial,
trim(column70) as oth_operating_pr_location,
trim(column71) as pay_to_plan_name,
trim(column72) as pay_to_plan_address_1,
trim(column73) as pay_to_plan_address_2,
trim(column74) as pay_to_plan_city,
trim(column75) as pay_to_plan_zip,
trim(column76) as pay_to_plan_state,
trim(column77) as pay_to_plan_naic_id,
trim(column78) as pay_to_plan_payer_id,
trim(column79) as pay_to_plan_plan_id,
trim(column80) as pay_to_plan_clm_ofc_number,
trim(column81) as pay_to_plan_tax_id,
trim(column82) as cob_payer_name_1,
trim(column83) as cob_payer_id_1,
trim(column84) as cob_payer_hpid_1,
trim(column85) as cob_payer_seq_code_1,
trim(column86) as cob_relationship_cd_1,
trim(column87) as cob_group_policy_nbr_1,
trim(column88) as cob_group_name_1,
trim(column89) as cob_ins_type_code_1,
trim(column90) as cob_payer_claim_filing_ind_code_1,
trim(column91) as cob_payer_name_2,
trim(column92) as cob_payer_id_2,
trim(column93) as cob_payer_hpid_2,
trim(column94) as cob_payer_seq_code_2,
trim(column95) as cob_relationship_cd_2,
trim(column96) as cob_group_policy_nbr_2,
trim(column97) as cob_group_name_2,
trim(column98) as cob_ins_type_code_2,
trim(column99) as cob_payer_claim_filing_ind_code_2
FROM emdeon_dx_raw_local
WHERE part_record_type = 'D'
CLUSTER BY claim_id;

CACHE TABLE emdeon_dx_raw_claims;
CACHE TABLE emdeon_dx_raw_service;
CACHE TABLE emdeon_dx_raw_diagnosis;
