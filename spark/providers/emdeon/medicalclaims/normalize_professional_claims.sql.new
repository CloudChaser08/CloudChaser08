-- Create table to hold the basic structre of a professional claim
DROP TABLE IF EXISTS emdeon_professional_claims_base;

DROP TABLE IF EXISTS related_diags_tmp;

DROP TABLE IF EXISTS related_diags;

DROP TABLE IF EXISTS emdeon_professional_claims_unrelated;

CREATE VIEW emdeon_professional_claims_base SELECT emdeon_dx_raw_claims.claim_id AS claim_id,
accident_related,
adjudicated_proc_modifier_1,
adjudicated_proc_modifier_2,
adjudicated_proc_modifier_3,
adjudicated_proc_modifier_4,
adjudicated_procedure,
adjudicated_procedure_qual,
admission_hour,
amb_hosp_to_hosp,
amb_nurse_to_diag,
amb_nurse_to_hosp,
ambulance_to_hosp,
assignment_sign,
bene_not_entitled,
claim_filing_ind_cd,
claim_type,
cob_group_name_1,
cob_group_name_2,
cob_group_policy_nbr_1,
cob_group_policy_nbr_2,
cob_ins_type_code_1,
cob_ins_type_code_2,
cob_payer_claim_filing_ind_code_1,
cob_payer_claim_filing_ind_code_2,
cob_payer_hpid_1,
cob_payer_hpid_2,
cob_payer_id_1,
cob_payer_id_2,
cob_payer_name_1,
cob_payer_name_2,
cob_payer_seq_code_1,
cob_payer_seq_code_2,
cob_relationship_cd_1,
cob_relationship_cd_2,
contract_allow_ind,
copay,
date_paid,
date_received,
date_service,
date_service_end,
diagnosis_code_qual,
concat_ws(':',
primary_diagnosis,
diagnosis_code_2,
diagnosis_code_3,
diagnosis_code_4,
diagnosis_code_5,
diagnosis_code_6,
diagnosis_code_7,
diagnosis_code_8,
diagnosis_code_9,
diagnosis_code_10,
diagnosis_code_11,
diagnosis_code_12,
diagnosis_code_13,
diagnosis_code_14,
diagnosis_code_15,
diagnosis_code_16,
diagnosis_code_17,
diagnosis_code_18,
diagnosis_code_19,
diagnosis_code_20,
diagnosis_code_21,
diagnosis_code_22,
diagnosis_code_23,
diagnosis_code_24,
diagnosis_code_25,
admit_diagnosis
) as diag_concat,
concat_ws(':',
diagnosis_pointer_1,
diagnosis_pointer_2,
diagnosis_pointer_3,
diagnosis_pointer_4,
diagnosis_pointer_5,
diagnosis_pointer_6,
diagnosis_pointer_7,
diagnosis_pointer_8
) as svcptr_concat,
get_diagnosis_with_priority(
concat_ws(':',
primary_diagnosis,
diagnosis_code_2,
diagnosis_code_3,
diagnosis_code_4,
diagnosis_code_5,
diagnosis_code_6,
diagnosis_code_7,
diagnosis_code_8,
diagnosis_code_9,
diagnosis_code_10,
diagnosis_code_11,
diagnosis_code_12,
diagnosis_code_13,
diagnosis_code_14,
diagnosis_code_15,
diagnosis_code_16,
diagnosis_code_17,
diagnosis_code_18,
diagnosis_code_19,
diagnosis_code_20,
diagnosis_code_21,
diagnosis_code_22,
diagnosis_code_23,
diagnosis_code_24,
diagnosis_code_25,
admit_diagnosis
),
concat_ws(':',
diagnosis_pointer_1,
diagnosis_pointer_2,
diagnosis_pointer_3,
diagnosis_pointer_4,
diagnosis_pointer_5,
diagnosis_pointer_6,
diagnosis_pointer_7,
diagnosis_pointer_8
)) as related,
dialysis_related,
discharge_hour,
electronic_claim,
emergency,
esrd_patient,
explanation_code,
group_name,
hosp_admis_or_er,
in_out_network,
initial_procedure,
inst_admit_source_std_id,
inst_admit_type_std_id,
inst_date_admitted,
inst_discharge_status_std_id,
inst_drg_std_id,
inst_type_of_bill_std_id,
line_allowed,
line_charge,
medical_coverage_type,
member_adr_city,
member_adr_line1,
member_adr_line2,
member_adr_state,
member_adr_zip,
member_dob,
member_fname,
member_gender,
member_id,
member_lname,
ndc_code,
new_patient,
not_covrd_specialt,
operating_pr_commercial,
operating_pr_first_name,
operating_pr_last_name,
operating_pr_location,
operating_pr_middle_name,
operating_pr_npi,
operating_pr_org_name,
operating_pr_state_lic,
operating_pr_upin,
oral_cavity,
oth_operating_pr_commercial,
oth_operating_pr_first_name,
oth_operating_pr_last_name,
oth_operating_pr_location,
oth_operating_pr_middle_name,
oth_operating_pr_npi,
oth_operating_pr_org_name,
oth_operating_pr_state_lic,
oth_operating_pr_upin,
paid_amount,
patient_age,
patient_control,
patient_dob,
patient_fname,
patient_gender,
patient_id,
patient_lname,
patient_reach_max,
patient_relation,
pay_to_plan_address_1,
pay_to_plan_address_2,
pay_to_plan_city,
pay_to_plan_clm_ofc_number,
pay_to_plan_naic_id,
pay_to_plan_name,
pay_to_plan_payer_id,
pay_to_plan_plan_id,
pay_to_plan_state,
pay_to_plan_tax_id,
pay_to_plan_zip,
pay_to_prov_address_1,
pay_to_prov_address_2,
pay_to_prov_city,
pay_to_prov_state,
pay_to_prov_zip,
payer_name,
payer_vendor_id,
place_of_service_std_id,
procedure_code,
procedure_code_qual,
procedure_modifier_1,
procedure_modifier_2,
procedure_modifier_3,
procedure_modifier_4,
procedure_units,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_npi,
prov_billing_ssn,
prov_billing_state,
prov_billing_state_license,
prov_billing_std_taxonomy,
prov_billing_tax_id,
prov_billing_upin,
prov_billing_zip,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_npi,
prov_facility_state,
prov_facility_state_license,
prov_facility_tax_id,
prov_facility_zip,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
prov_referring_npi,
prov_referring_state_license,
prov_referring_tax_id,
prov_referring_upin,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_npi,
prov_rendering_state_license,
prov_rendering_std_taxonomy,
prov_rendering_tax_id,
prov_rendering_upin,
prov_specialty,
release_sign,
revenue_code,
service_line_number,
statement_from,
statement_to,
sub_client_id,
supervising_pr_commercial,
supervising_pr_first_name,
supervising_pr_last_name,
supervising_pr_location,
supervising_pr_middle_name,
supervising_pr_npi,
supervising_pr_org_name,
supervising_pr_state_lic,
supervising_pr_upin,
svc_during_postop,
tooth_number,
tooth_surface,
total_allowed,
total_charge,
type_service
FROM emdeon_dx_raw_claims
    LEFT JOIN emdeon_dx_raw_diagnosis USING (claim_id)
    INNER JOIN emdeon_dx_raw_service USING (claim_id)
WHERE claim_type='P';

INSERT INTO medicalclaims_common_model
SELECT
NULL,
b.claim_id,
hvid,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
patient_gender,
patient_age,
-- 32873 is roughly 90 years, Redshift doesn't support year intervals
CASE WHEN date_service IS NOT NULL AND (patient_dob >= cast(year(date_sub(date_service, 32873)) as string)) AND patient_dob <= cast(year(current_date()) as string) THEN patient_dob ELSE NULL END as patient_year_of_birth,
threedigitzip as patient_zip3,
state as patient_state,
claim_type,
date_received,
CASE WHEN date_service IS NOT NULL THEN date_service ELSE statement_from END,
CASE WHEN date_service_end IS NOT NULL THEN date_service ELSE statement_to END,
inst_date_admitted,
NULL,
inst_admit_type_std_id,
NULL,
NULL,
inst_admit_source_std_id,
NULL,
NULL,
inst_discharge_status_std_id,
NULL,
NULL,
inst_type_of_bill_std_id,
NULL,
NULL,
inst_drg_std_id,
NULL,
NULL,
place_of_service_std_id,
NULL,
NULL,
service_line_number,
upper(regexp_replace(regexp_replace(regexp_replace(split(split(related,':')[n-1],'_')[0], ' ', ''), ',', ''), '\\.', '')) as diagnosis_code,
CASE WHEN diagnosis_code_qual = '9' THEN '01' WHEN diagnosis_code_qual = 'X' THEN '02' END,
split(split(related,':')[n-1],'_')[1] as diagnosis_priority,
NULL,
upper(regexp_replace(regexp_replace(procedure_code, ' ', ''), ',', '')) as procedure_code,
procedure_code_qual,
NULL,
procedure_units,
procedure_modifier_1,
procedure_modifier_2,
procedure_modifier_3,
procedure_modifier_4,
revenue_code,
ndc_code,
medical_coverage_type,
line_charge,
line_allowed,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_mapping.payer_id,
payer_mapping.payer_name,
payer_mapping.payer_parent_name,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_rendering_tax_id,
NULL,
NULL,
NULL,
prov_rendering_upin,
NULL,
prov_rendering_name_1,
prov_rendering_name_2,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_rendering_std_taxonomy,
prov_specialty as prov_rendering_vendor_specialty,
NULL,
prov_billing_tax_id,
NULL,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
NULL,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
NULL,
NULL,
prov_referring_tax_id,
NULL,
NULL,
prov_referring_state_license,
prov_referring_upin,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_facility_tax_id,
NULL,
NULL,
prov_facility_state_license,
NULL,
NULL,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
NULL,
NULL,
cob_payer_id_1 as cob_payer_vendor_id_1,
cob_payer_seq_code_1,
cob_payer_hpid_1,
cob_payer_claim_filing_ind_code_1,
cob_ins_type_code_1,
cob_payer_id_2 as cob_payer_vendor_id_2,
cob_payer_seq_code_2,
cob_payer_hpid_2,
cob_payer_claim_filing_ind_code_2,
cob_ins_type_code_2
FROM emdeon_professional_claims_base b
    CROSS JOIN split_indices
    LEFT JOIN matching_payload ON b.claim_id = claimid
    LEFT JOIN zip3_to_state ON threeDigitZip = zip3
    LEFT JOIN payer_mapping ON payer_vendor_id = payer_id
WHERE split(related,':')[n-1] IS NOT NULL AND split(related,':')[n-1] <> '';

-- There can be a lot of raws with the same diagnosis. Only extract unique ones
CREATE VIEW related_diags_tmp AS
SELECT DISTINCT claim_id, related
FROM emdeon_professional_claims_base;

CREATE VIEW related_diags claim_id, concat_ws(':', collect_list(related)) AS related
FROM related_diags_tmp GROUP BY claim_id;

CREATE VIEW emdeon_professional_claims_unrelated AS
SELECT accident_related,
admission_hour,
amb_hosp_to_hosp,
amb_nurse_to_diag,
amb_nurse_to_hosp,
assignment_sign,
e.claim_id,
claim_type,
contract_allow_ind,
date_received,
diagnosis_code_qual,
dialysis_related,
discharge_hour,
electronic_claim,
esrd_patient,
explanation_code,
group_name,
hosp_admis_or_er,
in_out_network,
initial_procedure,
inst_admit_source_std_id,
inst_admit_type_std_id,
inst_date_admitted,
inst_discharge_status_std_id,
inst_drg_std_id,
inst_type_of_bill_std_id,
medical_coverage_type,
member_adr_city,
member_adr_line1,
member_adr_line2,
member_adr_state,
member_adr_zip,
member_dob,
member_fname,
member_gender,
member_id,
member_lname,
new_patient,
not_covrd_specialt,
patient_age,
patient_control,
patient_dob,
patient_fname,
patient_gender,
patient_id,
patient_lname,
patient_relation,
payer_name,
payer_vendor_id,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_npi,
prov_billing_ssn,
prov_billing_state,
prov_billing_state_license,
prov_billing_std_taxonomy,
prov_billing_tax_id,
prov_billing_upin,
prov_billing_zip,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_npi,
prov_facility_state,
prov_facility_state_license,
prov_facility_tax_id,
prov_facility_zip,
prov_referring_name_1,
prov_referring_name_2,
prov_referring_npi,
prov_referring_tax_id,
prov_rendering_name_1,
prov_rendering_name_2,
prov_rendering_npi,
prov_rendering_state_license,
prov_rendering_std_taxonomy,
prov_rendering_tax_id,
prov_rendering_upin,
prov_specialty,
release_sign,
statement_from,
statement_to,
sub_client_id,
tooth_number,
total_allowed,
total_charge,
date_service,
date_service as date_service_end,
string_set_diff(diag_concat,
rd.related) as unrelated 
FROM emdeon_professional_claims_base e 
    INNER JOIN related_diags rd USING (claim_id) 
WHERE service_line_number = '1';

INSERT INTO medicalclaims_common_model
SELECT
NULL,
b.claim_id,
hvid,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
patient_gender,
patient_age,
-- 32873 is roughly 90 years, Redshift doesn't support year intervals
CASE WHEN statement_from IS NOT NULL AND (patient_dob >= cast(year(date_sub(statement_from, 32873)) as string)) AND patient_dob <= cast(year(current_date()) as string) THEN patient_dob ELSE NULL END as patient_year_of_birth,
threeDigitZip as patient_zip3,
state as patient_state,
claim_type,
date_received,
CASE WHEN date_service IS NOT NULL THEN date_service ELSE statement_from END,
CASE WHEN date_service_end IS NOT NULL THEN date_service ELSE statement_to END,
inst_date_admitted,
NULL,
inst_admit_type_std_id,
NULL,
NULL,
inst_admit_source_std_id,
NULL,
NULL,
inst_discharge_status_std_id,
NULL,
NULL,
inst_type_of_bill_std_id,
NULL,
NULL,
inst_drg_std_id,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
upper(regexp_replace(regexp_replace(regexp_replace(split(unrelated,':')[n-1], ' ', ''), ',', ''), '\\.', '')) as diagnosis_code,
CASE WHEN diagnosis_code_qual = '9' THEN '01' WHEN diagnosis_code_qual = 'X' THEN '02' END,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
medical_coverage_type,
NULL,
NULL,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_mapping.payer_id,
payer_mapping.payer_name,
payer_mapping.payer_parent_name,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_rendering_tax_id,
NULL,
NULL,
NULL,
prov_rendering_upin,
NULL,
prov_rendering_name_1,
prov_rendering_name_2,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_rendering_std_taxonomy,
prov_specialty AS prov_rendering_vendor_specialty,
NULL,
prov_billing_tax_id,
NULL,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
NULL,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
NULL,
NULL,
prov_referring_tax_id,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_referring_name_1,
prov_referring_name_2,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_facility_tax_id,
NULL,
NULL,
prov_facility_state_license,
NULL,
NULL,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL
FROM emdeon_professional_claims_unrelated b
    CROSS JOIN split_indices
    LEFT JOIN matching_payload ON b.claim_id = claimid
    LEFT JOIN zip3_to_state ON threeDigitZip = zip3
    LEFT JOIN payer_mapping ON payer_vendor_id = payer_id
WHERE split(unrelated,':')[n-1] IS NOT NULL AND split(unrelated,':')[n-1] <> '';

