DROP TABLE IF EXISTS emdeon_institutional_claims_extended;
CREATE TABLE emdeon_institutional_claims_extended AS SELECT *
FROM emdeon_dx_raw_claims LEFT JOIN emdeon_dx_raw_diagnosis USING (claim_id)
WHERE claim_type = 'I'
CLUSTER BY claim_id;
CACHE TABLE emdeon_institutional_claims_extended;

DROP TABLE IF EXISTS emdeon_institutional_claims_all;
CREATE TABLE emdeon_institutional_claims_all AS SELECT *
FROM emdeon_institutional_claims_extended 
    INNER JOIN emdeon_dx_raw_service USING (claim_id)
CLUSTER BY claim_id;
CACHE TABLE emdeon_institutional_claims_all;

INSERT INTO medicalclaims_common_model
SELECT
NULL,
b.claim_id,
hvid,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
patient_gender,
patient_age,
patient_dob,
threeDigitZip as patient_zip3,
state as patient_state,
claim_type,
date_received,
CASE WHEN date_service IS NOT NULL THEN date_service ELSE statement_from END,
CASE WHEN date_service_end IS NOT NULL THEN date_service ELSE statement_to END,
inst_date_admitted,
NULL,
inst_admit_type_std_id,
NULL,
NULL,
inst_admit_source_std_id,
NULL,
NULL,
inst_discharge_status_std_id,
NULL,
NULL,
inst_type_of_bill_std_id, 
NULL,
NULL,
inst_drg_std_id,
NULL,
NULL,
place_of_service_std_id,
NULL,
NULL,
service_line_number,
NULL,
CASE WHEN diagnosis_code_qual = '9' THEN '01' WHEN diagnosis_code_qual = 'X' THEN '02' END,
NULL,
NULL,
procedure_code,
procedure_code_qual,
CASE WHEN procedure_code IS NOT NULL AND UPPER(procedure_code) = UPPER(principal_procedure) THEN 1 ELSE NULL END AS principal_proc_ind,
procedure_units,
procedure_modifier_1,
procedure_modifier_2,
procedure_modifier_3,
procedure_modifier_4,
revenue_code,
ndc_code,
medical_coverage_type,
line_charge,
line_allowed,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_mapping.payer_id,
payer_mapping.payer_name,
payer_mapping.payer_parent_name,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_rendering_tax_id,
NULL,
NULL,
prov_rendering_state_license,
prov_rendering_upin,
NULL,
prov_rendering_name_1,
prov_rendering_name_2,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_rendering_std_taxonomy,
prov_specialty AS prov_rendering_vendor_specialty,
NULL,
prov_billing_tax_id,
NULL,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
NULL,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
NULL,
NULL,
prov_referring_tax_id,
NULL,
NULL,
prov_referring_state_license,
prov_referring_upin,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_facility_tax_id,
NULL,
NULL,
prov_facility_state_license,
NULL,
NULL,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
NULL,
NULL,
cob_payer_id_1 AS cob_payer_vendor_id_1,
cob_payer_seq_code_1,
cob_payer_hpid_1,
cob_payer_claim_filing_ind_code_1,
cob_ins_type_code_1,
cob_payer_id_2 AS cob_payer_vendor_id_2,
cob_payer_seq_code_2,
cob_payer_hpid_2,
cob_payer_claim_filing_ind_code_2,
cob_ins_type_code_2
FROM emdeon_institutional_claims_all b
    LEFT JOIN matching_payload ON b.claim_id = claimId
    LEFT JOIN zip3_to_state ON threeDigitZip = zip3
    LEFT JOIN payer_mapping ON payer_vendor_id = payer_id;

DROP TABLE IF EXISTS service_loc;
CREATE TABLE service_loc SELECT DISTINCT claim_id, place_of_service_std_id FROM emdeon_dx_raw_service;

DROP TABLE IF EXISTS emdeon_institutional_claims_unrelated;
CREATE TABLE emdeon_institutional_claims_unrelated SELECT *, uniquify(concat_ws(':', primary_diagnosis, diagnosis_code_2, diagnosis_code_3, diagnosis_code_4, diagnosis_code_5, diagnosis_code_6, diagnosis_code_7, diagnosis_code_8, diagnosis_code_9, diagnosis_code_10, diagnosis_code_11, diagnosis_code_12, diagnosis_code_13, diagnosis_code_14, diagnosis_code_15, diagnosis_code_16, diagnosis_code_17, diagnosis_code_18, diagnosis_code_19, diagnosis_code_20, diagnosis_code_21, diagnosis_code_22, diagnosis_code_23, diagnosis_code_24, diagnosis_code_25, admit_diagnosis)) as diag_concat FROM emdeon_institutional_claims_extended LEFT JOIN service_loc USING (claim_id);


INSERT INTO medicalclaims_common_model
SELECT
NULL,
b.claim_id,
hvid,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
patient_gender,
patient_age,
patient_dob,
threeDigitZip as patient_zip3,
state as patient_state,
claim_type,
date_received,
statement_from,
statement_to,
inst_date_admitted,
NULL,
inst_admit_type_std_id,
NULL,
NULL,
inst_admit_source_std_id,
NULL,
NULL,
inst_discharge_status_std_id,
NULL,
NULL,
inst_type_of_bill_std_id,
NULL,
NULL,
inst_drg_std_id,
NULL,
NULL,
place_of_service_std_id,
NULL,
NULL,
NULL,
split(diag_concat,':')[n-1] AS diagnosis_code,
CASE WHEN diagnosis_code_qual = '9' THEN '01' WHEN diagnosis_code_qual = 'X' THEN '02' END,
NULL,
CASE WHEN UPPER(split(diag_concat,':')[n-1]) IS NOT NULL AND UPPER(split(diag_concat,':')[n-1]) = UPPER(admit_diagnosis) THEN 1 ELSE NULL END AS admit_diagnosis_ind,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
medical_coverage_type,
NULL,
NULL,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_mapping.payer_id,
payer_mapping.payer_name,
payer_mapping.payer_parent_name,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_rendering_tax_id,
NULL,
NULL,
prov_rendering_state_license,
prov_rendering_upin,
NULL,
prov_rendering_name_1,
prov_rendering_name_2,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_rendering_std_taxonomy,
prov_specialty AS prov_rendering_vendor_specialty,
NULL,
prov_billing_tax_id,
NULL,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
NULL,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
NULL,
NULL,
prov_referring_tax_id,
NULL,
NULL,
prov_referring_state_license,
prov_referring_upin,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_facility_tax_id,
NULL,
NULL,
prov_facility_state_license,
NULL,
NULL,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
NULL,
NULL,
cob_payer_id_1 AS cob_payer_vendor_id_1,
cob_payer_seq_code_1,
cob_payer_hpid_1,
cob_payer_claim_filing_ind_code_1,
cob_ins_type_code_1,
cob_payer_id_2 AS cob_payer_vendor_id_2,
cob_payer_seq_code_2,
cob_payer_hpid_2,
cob_payer_claim_filing_ind_code_2,
cob_ins_type_code_2
FROM emdeon_institutional_claims_unrelated b
    CROSS JOIN split_indices
    LEFT JOIN matching_payload ON b.claim_id = claimid
    LEFT JOIN zip3_to_state ON threeDigitZip = zip3
    LEFT JOIN payer_mapping ON payer_vendor_id = payer_id
WHERE split(diag_concat,':')[n-1] IS NOT NULL AND split(diag_concat,':')[n-1] <> '';

DROP TABLE IF EXISTS emdeon_institutional_claims_procedures;
CREATE TABLE emdeon_institutional_claims_procedures AS SELECT DISTINCT claim_id, procedure_code FROM emdeon_institutional_claims_all;

DROP TABLE IF EXISTS together;        
CREATE TABLE together (claim_id string, unrelated varchar(5000), principal_procedure_check string);

INSERT INTO together
SELECT a.claim_id, string_set_diff(unrelated_concat, related_concat) AS unrelated, principal_procedure_check
FROM
(SELECT claim_id, concat_ws(':', collect_list(procedure_code)) AS related_concat FROM emdeon_institutional_claims_procedures GROUP BY claim_id) a
INNER JOIN
(SELECT claim_id, principal_procedure as principal_procedure_check, concat_ws(':',
principal_procedure, other_proc_code_2, other_proc_code_3, other_proc_code_4, other_proc_code_5, other_proc_code_6, other_proc_code_7, other_proc_code_8, other_proc_code_9, other_proc_code_10, other_proc_code_11, other_proc_code_12, other_proc_code_13, other_proc_code_14, other_proc_code_15, other_proc_code_16, other_proc_code_17, other_proc_code_18, other_proc_code_19, other_proc_code_20, other_proc_code_21, other_proc_code_22, other_proc_code_23, other_proc_code_24, other_proc_code_25 ) AS unrelated_concat
FROM 
emdeon_institutional_claims_unrelated) b USING (claim_id)
CLUSTER BY claim_id;

DROP TABLE IF EXISTS emdeon_institutional_claims_unrelated_procs;
CREATE TABLE emdeon_institutional_claims_unrelated_procs AS SELECT *
FROM together INNER JOIN emdeon_institutional_claims_unrelated USING (claim_id)
CLUSTER BY claim_id;

INSERT INTO medicalclaims_common_model
SELECT
NULL,
b.claim_id,
hvid,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
patient_gender,
patient_age,
patient_dob,
threeDigitZip as patient_zip3,
state as patient_state,
claim_type,
date_received,
statement_from,
statement_to,
inst_date_admitted,
NULL,
inst_admit_type_std_id,
NULL,
NULL,
inst_admit_source_std_id,
NULL,
NULL,
inst_discharge_status_std_id,
NULL,
NULL,
inst_type_of_bill_std_id,
NULL,
NULL,
inst_drg_std_id,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
CASE WHEN diagnosis_code_qual = '9' THEN '01' WHEN diagnosis_code_qual = 'X' THEN '02' END,
NULL,
NULL,
split(unrelated,':')[n-1] AS procedure_code,
NULL,
CASE WHEN UPPER(split(unrelated,':')[n-1]) IS NOT NULL AND UPPER(split(unrelated,':')[n-1]) = UPPER(principal_procedure) THEN 1 ELSE NULL END AS principal_proc_ind,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
medical_coverage_type,
NULL,
NULL,
total_charge,
total_allowed,
prov_rendering_npi,
prov_billing_npi,
prov_referring_npi,
prov_facility_npi,
payer_mapping.payer_id,
payer_mapping.payer_name,
payer_mapping.payer_parent_name,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_rendering_tax_id,
NULL,
NULL,
prov_rendering_state_license,
prov_rendering_upin,
NULL,
prov_rendering_name_1,
prov_rendering_name_2,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_rendering_std_taxonomy,
prov_specialty AS prov_rendering_vendor_specialty,
NULL,
prov_billing_tax_id,
NULL,
prov_billing_ssn,
prov_billing_state_license,
prov_billing_upin,
NULL,
prov_billing_name_1,
prov_billing_name_2,
prov_billing_address_1,
prov_billing_address_2,
prov_billing_city,
prov_billing_state,
prov_billing_zip,
prov_billing_std_taxonomy,
NULL,
NULL,
prov_referring_tax_id,
NULL,
NULL,
prov_referring_state_license,
prov_referring_upin,
prov_referring_commercial_id,
prov_referring_name_1,
prov_referring_name_2,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
prov_facility_tax_id,
NULL,
NULL,
prov_facility_state_license,
NULL,
NULL,
prov_facility_name_1,
prov_facility_name_2,
prov_facility_address_1,
prov_facility_address_2,
prov_facility_city,
prov_facility_state,
prov_facility_zip,
NULL,
NULL,
cob_payer_id_1 AS cob_payer_vendor_id_1,
cob_payer_seq_code_1,
cob_payer_hpid_1,
cob_payer_claim_filing_ind_code_1,
cob_ins_type_code_1,
cob_payer_id_2 AS cob_payer_vendor_id_2,
cob_payer_seq_code_2,
cob_payer_hpid_2,
cob_payer_claim_filing_ind_code_2,
cob_ins_type_code_2
FROM emdeon_institutional_claims_unrelated_procs b
    CROSS JOIN split_indices
    LEFT JOIN matching_payload ON b.claim_id = claimid
    LEFT JOIN zip3_to_state ON threeDigitZip = zip3
    LEFT JOIN payer_mapping ON payer_vendor_id = payer_id
WHERE split(unrelated,':')[n-1] IS NOT NULL AND split(unrelated,':')[n-1] <> '';
