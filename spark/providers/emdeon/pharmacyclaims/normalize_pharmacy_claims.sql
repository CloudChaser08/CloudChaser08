INSERT INTO pharmacyclaims_common_model
SELECT
NULL,
claim_id,
hvid,
{today},
'1',
{filename},
{feedname},
{vendor},
NULL,
CASE WHEN UPPER(gender_code) = 'M' OR gender_code = '1' THEN 'M' WHEN UPPER(gender_code) = 'F' OR gender_code = '2' THEN 'F' ELSE 'U' END,
NULL,
year_of_birth,
threeDigitZip,
state,
date_service,
date_written,
date_injury,
date_authorized,
CASE WHEN length(time_authorized) >= 4 THEN concat_ws(':', substring(time_authorized, 1, 2), substring(time_authorized, 3, 2)) ELSE NULL END,
transaction_code,
NULL,
response_code,
NULL,
reject_reason_code_1,
reject_reason_code_2,
reject_reason_code_3,
reject_reason_code_4,
reject_reason_code_5,
upper(regexp_replace(regexp_replace(regexp_replace(diagnosis_code, '\\.', ''), ',', ''), ' ', '')),
diagnosis_code_qual,
CASE WHEN product_service_id_qualifier in ('7','8','9','07','08','09') then product_service_id else NULL END as procedure_code,
CASE WHEN product_service_id_qualifier in ('7','8','9','07','08','09') then product_service_id_qualifier else NULL END as procedure_code_qual,
CASE WHEN product_service_id_qualifier in ('3','03') then product_service_id else NULL END as ndc_code,
CASE WHEN product_service_id_qualifier not in ('7','8','9','07','08','09','3','03') then product_service_id else NULL end as product_service_id,
CASE WHEN product_service_id_qualifier not in ('7','8','9','07','08','09','3','03') then product_service_id_qualifier else NULL end as product_service_id_qual,
rx_number,
rx_number_qual,
bin_number,
processor_control_number,
fill_number,
refill_auth_amount,
extract_number(dispensed_quantity),
unit_of_measure,
extract_number(days_supply),
pharmacy_npi,
CASE WHEN (prov_dispensing_qual in ('1','01')) OR (prov_dispensing_qual in ('5', '05') AND regexp_extract(provider_id, '^[0-9]{{10}}$', 0) <> '') then provider_id else NULL end as prov_dispensing_npi,
payer_mapping.payer_id,
payer_id_qual,
payer_mapping.payer_name,
payer_mapping.payer_parent_name,
NULL,
payer_plan_id,
payer_plan_name,
payer_type,
compound_code,
unit_dose_indicator,
dispensed_as_written,
prescription_origin,
submission_clarification,
orig_prescribed_product_service_code,
orig_prescribed_product_service_code_qual,
extract_number(orig_prescribed_quantity),
prior_auth_type_code,
level_of_service,
reason_for_service,
professional_service_code,
result_of_service_code,
CASE WHEN (prov_prescribing_qual in ('1','01')) OR (prov_prescribing_qual in ('5', '05') AND regexp_extract(prescriber_id, '^[0-9]{{10}}$', 0) <> '') then prescriber_id else NULL end as prov_prescribing_npi,
CASE WHEN (prov_primary_care_qual in ('1','01')) OR (prov_primary_care_qual in ('5', '05') AND regexp_extract(primary_care_provider_id, '^[0-9]{{10}}$', 0) <> '') then primary_care_provider_id else NULL end as prov_primary_care_npi,
cob_count,
extract_number(usual_and_customary_charge),
extract_number(sales_tax),
extract_number(product_selection_attributed),
extract_number(other_payer_recognized),
extract_number(periodic_deductible_applied),
extract_number(periodic_benefit_exceed),
extract_number(accumulated_deductible),
extract_number(remaining_deductible),
extract_number(remaining_benefit),
extract_number(copay_coinsurance),
basis_of_cost_determination,
extract_number(submitted_ingredient_cost),
extract_number(submitted_dispensing_fee),
extract_number(submitted_dispensing_fee),
extract_number(submitted_gross_due),
extract_number(submitted_professional_service_fee),
extract_number(submitted_flat_sales_tax),
extract_number(submitted_percent_sales_tax_basis),
extract_number(submitted_percent_sales_tax_rate),
extract_number(submitted_percent_sales_tax_amount),
extract_number(submitted_patient_pay),
extract_number(submitted_other_claimed_qual),
extract_number(submitted_other_claimed),
basis_of_reimbursement_determination,
extract_number(paid_ingredient_cost),
extract_number(paid_dispensing_fee),
NULL,
extract_number(paid_gross_due),
extract_number(paid_professional_service_fee),
extract_number(paid_flat_sales_tax),
extract_number(paid_percent_sales_tax_basis),
extract_number(paid_percent_sales_tax_rate),
NULL,
extract_number(paid_patient_pay),
extract_number(paid_other_claimed_qual),
extract_number(paid_other_claimed),
tax_exempt_indicator,
coupon_type,
coupon_number,
coupon_value,
CASE WHEN ncpdp_number <> '' and ncpdp_number is not null then ncpdp_number else service_provider_id end as pharmacy_other_id,
CASE WHEN ncpdp_number <> '' and ncpdp_number is not null then '07' else service_provider_id_qualifier end as pharmacy_other_qual,
pharmacy_postal_code,
CASE WHEN (prov_dispensing_qual not in ('1','01')) AND (prov_dispensing_qual not in ('5', '05') OR regexp_extract(provider_id, '^[0-9]{{10}}$', 0) = '') then provider_id else NULL end as prov_dispensing_id,
CASE WHEN (prov_dispensing_qual not in ('1','01')) AND (prov_dispensing_qual not in ('5', '05') OR regexp_extract(provider_id, '^[0-9]{{10}}$', 0) = '') then prov_dispensing_qual else NULL end as prov_dispensing_qual,
CASE WHEN (prov_prescribing_qual not in ('1','01')) AND (prov_prescribing_qual not in ('5', '05') OR regexp_extract(prescriber_id, '^[0-9]{{10}}$', 0) = '') then prescriber_id else NULL end as prov_prescribing_id,
CASE WHEN (prov_prescribing_qual not in ('1','01')) AND (prov_prescribing_qual not in ('5', '05') OR regexp_extract(prescriber_id, '^[0-9]{{10}}$', 0) = '') then prov_prescribing_qual else NULL end as prov_prescribing_qual,
CASE WHEN (prov_primary_care_qual not in ('1','01')) AND (prov_primary_care_qual not in ('5', '05') OR regexp_extract(primary_care_provider_id, '^[0-9]{{10}}$', 0) = '') then primary_care_provider_id else NULL end as prov_primary_care_id,
CASE WHEN (prov_primary_care_qual not in ('1','01')) AND (prov_primary_care_qual not in ('5', '05') OR regexp_extract(primary_care_provider_id, '^[0-9]{{10}}$', 0) = '') then prov_primary_care_qual else NULL end as prov_primary_care_qual,
other_payer_coverage_type,
other_payer_coverage_id,
other_payer_coverage_qual,
other_payer_date,
other_payer_coverage_code,
CASE WHEN transaction_code = 'B2' THEN 'Reversal' WHEN transaction_code = 'B1' AND response_code = 'R' THEN 'Claim Rejected' ELSE NULL END
FROM emdeon_rx_trimmed
    LEFT JOIN matching_payload ON claim_id = claimid
    LEFT JOIN zip3_to_state ON threeDigitZip = zip3
    LEFT JOIN payer_mapping ON ltrim(emdeon_rx_trimmed.payer_id) = payer_mapping.payer_id;
