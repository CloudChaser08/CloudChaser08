set spark.sql.shuffle.partitions=1000;
DROP TABLE IF EXISTS all_normalized_claims;
CREATE TEMPORARY VIEW all_normalized_claims AS SELECT *, concat_ws(':', record_id, data_set) rec_id FROM normalized_claims UNION ALL SELECT *, 1 as best_date, concat_ws(':', record_id, data_set) as rec_id FROM pharmacyclaims_common_model CLUSTER BY rec_id;
CACHE TABLE all_normalized_claims;

DROP TABLE IF EXISTS reversed;
CREATE TABLE reversed AS 
SELECT rec_id FROM
all_normalized_claims as normalized_claims
INNER JOIN pharmacyclaims_common_model AS p
ON UPPER(normalized_claims.transaction_code_std) = 'B1'
    AND UPPER(normalized_claims.response_code_std) = 'P'
    AND normalized_claims.pharmacy_npi = p.pharmacy_npi
    AND normalized_claims.rx_number = p.rx_number
    AND normalized_claims.fill_number = p.fill_number
    AND COALESCE(normalized_claims.product_service_id, '') = COALESCE(p.product_service_id, '')
    AND COALESCE(normalized_claims.procedure_code, '') = COALESCE(p.procedure_code, '')
    AND COALESCE(normalized_claims.ndc_code, '') = COALESCE(p.ndc_code, '')
    AND normalized_claims.bin_number = p.bin_number
    AND COALESCE(normalized_claims.processor_control_number, '') = COALESCE(p.processor_control_number, '')
    AND normalized_claims.date_service = p.date_service
    AND UPPER(p.transaction_code_std) = 'B2'
    AND normalized_claims.logical_delete_reason IS NULL
    AND (normalized_claims.date_authorized < p.date_authorized 
        OR (normalized_claims.date_authorized = p.date_authorized AND normalized_claims.time_authorized <= p.time_authorized))
CLUSTER BY rec_id;

CACHE TABLE reversed;

DROP TABLE IF EXISTS pharmacyclaims_reversed;
CREATE TABLE pharmacyclaims_reversed AS
SELECT 
record_id,
claim_id,
hvid,
created,
model_version,
data_set,
data_feed,
data_vendor,
source_version,
patient_gender,
patient_age,
patient_year_of_birth,
patient_zip3,
patient_state,
date_service,
date_written,
date_injury,
date_authorized,
time_authorized,
transaction_code_std,
transaction_code_vendor,
response_code_std,
response_code_vendor,
reject_reason_code_1,
reject_reason_code_2,
reject_reason_code_3,
reject_reason_code_4,
reject_reason_code_5,
diagnosis_code,
diagnosis_code_qual,
procedure_code,
procedure_code_qual,
ndc_code,
product_service_id,
product_service_id_qual,
rx_number,
rx_number_qual,
bin_number,
processor_control_number,
fill_number,
refill_auth_amount,
dispensed_quantity,
unit_of_measure,
days_supply,
pharmacy_npi,
prov_dispensing_npi,
payer_id,
payer_id_qual,
payer_name,
payer_parent_name,
payer_org_name,
payer_plan_id,
payer_plan_name,
payer_type,
compound_code,
unit_dose_indicator,
dispensed_as_written,
prescription_origin,
submission_clarification,
orig_prescribed_product_service_code,
orig_prescribed_product_service_code_qual,
orig_prescribed_quantity,
prior_auth_type_code,
level_of_service,
reason_for_service,
professional_service_code,
result_of_service_code,
prov_prescribing_npi,
prov_primary_care_npi,
cob_count,
usual_and_customary_charge,
sales_tax,
product_selection_attributed,
other_payer_recognized,
periodic_deductible_applied,
periodic_benefit_exceed,
accumulated_deductible,
remaining_deductible,
remaining_benefit,
copay_coinsurance,
basis_of_cost_determination,
submitted_ingredient_cost,
submitted_dispensing_fee,
submitted_incentive,
submitted_gross_due,
submitted_professional_service_fee,
submitted_flat_sales_tax,
submitted_percent_sales_tax_basis,
submitted_percent_sales_tax_rate,
submitted_percent_sales_tax_amount,
submitted_patient_pay,
submitted_other_claimed_qual,
submitted_other_claimed,
basis_of_reimbursement_determination,
paid_ingredient_cost,
paid_dispensing_fee,
paid_incentive,
paid_gross_due,
paid_professional_service_fee,
paid_flat_sales_tax,
paid_percent_sales_tax_basis,
paid_percent_sales_tax_rate,
paid_percent_sales_tax,
paid_patient_pay,
paid_other_claimed_qual,
paid_other_claimed,
tax_exempt_indicator,
coupon_type,
coupon_number,
coupon_value,
pharmacy_other_id,
pharmacy_other_qual,
pharmacy_postal_code,
prov_dispensing_id,
prov_dispensing_qual,
prov_prescribing_id,
prov_prescribing_qual,
prov_primary_care_id,
prov_primary_care_qual,
other_payer_coverage_type,
other_payer_coverage_id,
other_payer_coverage_qual,
other_payer_date,
other_payer_coverage_code,
'Reversed Claim' as logical_delete_reason
FROM all_normalized_claims
WHERE EXISTS (SELECT * FROM reversed WHERE reversed.rec_id = all_normalized_claims.rec_id);

INSERT INTO pharmacyclaims_reversed 
SELECT 
record_id,
claim_id,
hvid,
created,
model_version,
data_set,
data_feed,
data_vendor,
source_version,
patient_gender,
patient_age,
patient_year_of_birth,
patient_zip3,
patient_state,
date_service,
date_written,
date_injury,
date_authorized,
time_authorized,
transaction_code_std,
transaction_code_vendor,
response_code_std,
response_code_vendor,
reject_reason_code_1,
reject_reason_code_2,
reject_reason_code_3,
reject_reason_code_4,
reject_reason_code_5,
diagnosis_code,
diagnosis_code_qual,
procedure_code,
procedure_code_qual,
ndc_code,
product_service_id,
product_service_id_qual,
rx_number,
rx_number_qual,
bin_number,
processor_control_number,
fill_number,
refill_auth_amount,
dispensed_quantity,
unit_of_measure,
days_supply,
pharmacy_npi,
prov_dispensing_npi,
payer_id,
payer_id_qual,
payer_name,
payer_parent_name,
payer_org_name,
payer_plan_id,
payer_plan_name,
payer_type,
compound_code,
unit_dose_indicator,
dispensed_as_written,
prescription_origin,
submission_clarification,
orig_prescribed_product_service_code,
orig_prescribed_product_service_code_qual,
orig_prescribed_quantity,
prior_auth_type_code,
level_of_service,
reason_for_service,
professional_service_code,
result_of_service_code,
prov_prescribing_npi,
prov_primary_care_npi,
cob_count,
usual_and_customary_charge,
sales_tax,
product_selection_attributed,
other_payer_recognized,
periodic_deductible_applied,
periodic_benefit_exceed,
accumulated_deductible,
remaining_deductible,
remaining_benefit,
copay_coinsurance,
basis_of_cost_determination,
submitted_ingredient_cost,
submitted_dispensing_fee,
submitted_incentive,
submitted_gross_due,
submitted_professional_service_fee,
submitted_flat_sales_tax,
submitted_percent_sales_tax_basis,
submitted_percent_sales_tax_rate,
submitted_percent_sales_tax_amount,
submitted_patient_pay,
submitted_other_claimed_qual,
submitted_other_claimed,
basis_of_reimbursement_determination,
paid_ingredient_cost,
paid_dispensing_fee,
paid_incentive,
paid_gross_due,
paid_professional_service_fee,
paid_flat_sales_tax,
paid_percent_sales_tax_basis,
paid_percent_sales_tax_rate,
paid_percent_sales_tax,
paid_patient_pay,
paid_other_claimed_qual,
paid_other_claimed,
tax_exempt_indicator,
coupon_type,
coupon_number,
coupon_value,
pharmacy_other_id,
pharmacy_other_qual,
pharmacy_postal_code,
prov_dispensing_id,
prov_dispensing_qual,
prov_prescribing_id,
prov_prescribing_qual,
prov_primary_care_id,
prov_primary_care_qual,
other_payer_coverage_type,
other_payer_coverage_id,
other_payer_coverage_qual,
other_payer_date,
other_payer_coverage_code,
logical_delete_reason
FROM all_normalized_claims
WHERE NOT EXISTS (SELECT * FROM reversed WHERE reversed.rec_id = all_normalized_claims.rec_id);

DROP TABLE IF EXISTS pharmacyclaims_common_model;
ALTER TABLE pharmacyclaims_reversed RENAME TO pharmacyclaims_common_model;
