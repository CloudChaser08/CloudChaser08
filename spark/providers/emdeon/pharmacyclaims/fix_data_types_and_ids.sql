INSERT INTO pharmacyclaims_common_model
SELECT
CASE WHEN trim(record_id) == '' THEN NULL ELSE trim(record_id) END AS record_id,
CASE WHEN trim(claim_id) == '' THEN NULL ELSE trim(claim_id) END AS claim_id,
CASE WHEN trim(hvid) == '' THEN NULL ELSE trim(hvid) END AS hvid,
CASE WHEN trim(created) == '' THEN NULL ELSE trim(created) END AS created,
CASE WHEN trim(model_version) == '' THEN NULL ELSE trim(model_version) END AS model_version,
CASE WHEN trim(data_set) == '' THEN NULL ELSE trim(data_set) END AS data_set,
'11',
'11',
CASE WHEN trim(source_version) == '' THEN NULL ELSE trim(source_version) END AS source_version,
CASE WHEN trim(patient_gender) == '' THEN NULL ELSE trim(patient_gender) END AS patient_gender,
CASE WHEN trim(patient_age) == '' THEN NULL ELSE trim(patient_age) END AS patient_age,
CASE WHEN trim(patient_year_of_birth) == '' THEN NULL ELSE trim(patient_year_of_birth) END AS patient_year_of_birth,
CASE WHEN trim(patient_zip3) == '' THEN NULL ELSE trim(patient_zip3) END AS patient_zip3,
CASE WHEN trim(patient_state) == '' THEN NULL ELSE trim(patient_state) END AS patient_state,
extract_date(date_service, '%Y-%m-%d', cast({min_date} as date), cast({max_date} as date)),
extract_date(date_written, '%Y-%m-%d', cast({min_date} as date), cast({max_date} as date)),
extract_date(date_injury, '%Y-%m-%d', cast({min_date} as date), cast({max_date} as date)),
extract_date(date_authorized, '%Y-%m-%d', cast({min_date} as date), cast({max_date} as date)),
CASE WHEN trim(time_authorized) == '' THEN NULL ELSE trim(time_authorized) END AS time_authorized,
CASE WHEN trim(transaction_code_std) == '' THEN NULL ELSE trim(transaction_code_std) END AS transaction_code_std,
CASE WHEN trim(transaction_code_vendor) == '' THEN NULL ELSE trim(transaction_code_vendor) END AS transaction_code_vendor,
CASE WHEN trim(response_code_std) == '' THEN NULL ELSE trim(response_code_std) END AS response_code_std,
CASE WHEN trim(response_code_vendor) == '' THEN NULL ELSE trim(response_code_vendor) END AS response_code_vendor,
CASE WHEN trim(reject_reason_code_1) == '' THEN NULL ELSE trim(reject_reason_code_1) END AS reject_reason_code_1,
CASE WHEN trim(reject_reason_code_2) == '' THEN NULL ELSE trim(reject_reason_code_2) END AS reject_reason_code_2,
CASE WHEN trim(reject_reason_code_3) == '' THEN NULL ELSE trim(reject_reason_code_3) END AS reject_reason_code_3,
CASE WHEN trim(reject_reason_code_4) == '' THEN NULL ELSE trim(reject_reason_code_4) END AS reject_reason_code_4,
CASE WHEN trim(reject_reason_code_5) == '' THEN NULL ELSE trim(reject_reason_code_5) END AS reject_reason_code_5,
CASE WHEN trim(diagnosis_code) == '' THEN NULL ELSE trim(diagnosis_code) END AS diagnosis_code,
CASE WHEN trim(diagnosis_code_qual) == '' THEN NULL ELSE trim(diagnosis_code_qual) END AS diagnosis_code_qual,
CASE WHEN trim(procedure_code) == '' THEN NULL ELSE trim(procedure_code) END AS procedure_code,
CASE WHEN trim(procedure_code_qual) == '' THEN NULL ELSE trim(procedure_code_qual) END AS procedure_code_qual,
CASE WHEN trim(ndc_code) == '' THEN NULL ELSE trim(ndc_code) END AS ndc_code,
CASE WHEN trim(product_service_id) == '' THEN NULL ELSE trim(product_service_id) END AS product_service_id,
CASE WHEN trim(product_service_id_qual) == '' THEN NULL ELSE trim(product_service_id_qual) END AS product_service_id_qual,
CASE WHEN trim(rx_number) == '' THEN NULL ELSE trim(rx_number) END AS rx_number,
CASE WHEN trim(rx_number_qual) == '' THEN NULL ELSE trim(rx_number_qual) END AS rx_number_qual,
CASE WHEN trim(bin_number) == '' THEN NULL ELSE trim(bin_number) END AS bin_number,
CASE WHEN trim(processor_control_number) == '' THEN NULL ELSE trim(processor_control_number) END AS processor_control_number,
cast(fill_number as float),
CASE WHEN trim(refill_auth_amount) == '' THEN NULL ELSE trim(refill_auth_amount) END AS refill_auth_amount,
cast(dispensed_quantity as float),
CASE WHEN trim(unit_of_measure) == '' THEN NULL ELSE trim(unit_of_measure) END AS unit_of_measure,
cast(days_supply as float),
CASE WHEN trim(pharmacy_npi) == '' THEN NULL ELSE trim(pharmacy_npi) END AS pharmacy_npi,
CASE WHEN trim(prov_dispensing_npi) == '' THEN NULL ELSE trim(prov_dispensing_npi) END AS prov_dispensing_npi,
CASE WHEN trim(payer_id) == '' THEN NULL ELSE trim(payer_id) END AS payer_id,
CASE WHEN trim(payer_id_qual) == '' THEN NULL ELSE trim(payer_id_qual) END AS payer_id_qual,
CASE WHEN trim(payer_name) == '' THEN NULL ELSE trim(payer_name) END AS payer_name,
CASE WHEN trim(payer_parent_name) == '' THEN NULL ELSE trim(payer_parent_name) END AS payer_parent_name,
CASE WHEN trim(payer_org_name) == '' THEN NULL ELSE trim(payer_org_name) END AS payer_org_name,
CASE WHEN trim(payer_plan_id) == '' THEN NULL ELSE trim(payer_plan_id) END AS payer_plan_id,
CASE WHEN trim(payer_plan_name) == '' THEN NULL ELSE trim(payer_plan_name) END AS payer_plan_name,
CASE WHEN trim(payer_type) == '' THEN NULL ELSE trim(payer_type) END AS payer_type,
CASE WHEN trim(compound_code) == '' THEN NULL ELSE trim(compound_code) END AS compound_code,
CASE WHEN trim(unit_dose_indicator) == '' THEN NULL ELSE trim(unit_dose_indicator) END AS unit_dose_indicator,
CASE WHEN trim(dispensed_as_written) == '' THEN NULL ELSE trim(dispensed_as_written) END AS dispensed_as_written,
CASE WHEN trim(prescription_origin) == '' THEN NULL ELSE trim(prescription_origin) END AS prescription_origin,
CASE WHEN trim(submission_clarification) == '' THEN NULL ELSE trim(submission_clarification) END AS submission_clarification,
CASE WHEN trim(orig_prescribed_product_service_code) == '' THEN NULL ELSE trim(orig_prescribed_product_service_code) END AS orig_prescribed_product_service_code,
CASE WHEN trim(orig_prescribed_product_service_code_qual) == '' THEN NULL ELSE trim(orig_prescribed_product_service_code_qual) END AS orig_prescribed_product_service_code_qual,
CASE WHEN trim(orig_prescribed_quantity) == '' THEN NULL ELSE trim(orig_prescribed_quantity) END AS orig_prescribed_quantity,
CASE WHEN trim(prior_auth_type_code) == '' THEN NULL ELSE trim(prior_auth_type_code) END AS prior_auth_type_code,
CASE WHEN trim(level_of_service) == '' THEN NULL ELSE trim(level_of_service) END AS level_of_service,
CASE WHEN trim(reason_for_service) == '' THEN NULL ELSE trim(reason_for_service) END AS reason_for_service,
CASE WHEN trim(professional_service_code) == '' THEN NULL ELSE trim(professional_service_code) END AS professional_service_code,
CASE WHEN trim(result_of_service_code) == '' THEN NULL ELSE trim(result_of_service_code) END AS result_of_service_code,
CASE WHEN trim(prov_prescribing_npi) == '' THEN NULL ELSE trim(prov_prescribing_npi) END AS prov_prescribing_npi,
CASE WHEN trim(prov_primary_care_npi) == '' THEN NULL ELSE trim(prov_primary_care_npi) END AS prov_primary_care_npi,
CASE WHEN trim(cob_count) == '' THEN NULL ELSE trim(cob_count) END AS cob_count,
cast(usual_and_customary_charge as float),
cast(sales_tax as float),
cast(product_selection_attributed as float),
cast(other_payer_recognized as float),
cast(periodic_deductible_applied as float),
cast(periodic_benefit_exceed as float),
cast(accumulated_deductible as float),
cast(remaining_deductible as float),
cast(remaining_benefit as float),
cast(copay_coinsurance as float),
cast(basis_of_cost_determination as float),
cast(submitted_ingredient_cost as float),
cast(submitted_dispensing_fee as float),
cast(submitted_incentive as float),
cast(submitted_gross_due as float),
cast(submitted_professional_service_fee as float),
cast(submitted_flat_sales_tax as float),
cast(submitted_percent_sales_tax_basis as float),
cast(submitted_percent_sales_tax_rate as float),
cast(submitted_percent_sales_tax_amount as float),
cast(submitted_patient_pay as float),
cast(submitted_other_claimed_qual as float),
cast(submitted_other_claimed as float),
cast(basis_of_reimbursement_determination as float),
cast(paid_ingredient_cost as float),
cast(paid_dispensing_fee as float),
cast(paid_incentive as float),
cast(paid_gross_due as float),
cast(paid_professional_service_fee as float),
cast(paid_flat_sales_tax as float),
cast(paid_percent_sales_tax_basis as float),
cast(paid_percent_sales_tax_rate as float),
cast(paid_percent_sales_tax as float),
cast(paid_patient_pay as float),
cast(paid_other_claimed_qual as float),
cast(paid_other_claimed as float),
CASE WHEN trim(tax_exempt_indicator) == '' THEN NULL ELSE trim(tax_exempt_indicator) END AS tax_exempt_indicator,
CASE WHEN trim(coupon_type) == '' THEN NULL ELSE trim(coupon_type) END AS coupon_type,
CASE WHEN trim(coupon_number) == '' THEN NULL ELSE trim(coupon_number) END AS coupon_number,
cast(coupon_value as float),
CASE WHEN trim(pharmacy_other_id) == '' THEN NULL ELSE trim(pharmacy_other_id) END AS pharmacy_other_id,
CASE WHEN trim(pharmacy_other_qual) == '' THEN NULL ELSE trim(pharmacy_other_qual) END AS pharmacy_other_qual,
CASE WHEN trim(pharmacy_postal_code) == '' THEN NULL ELSE trim(pharmacy_postal_code) END AS pharmacy_postal_code,
CASE WHEN trim(prov_dispensing_id) == '' THEN NULL ELSE trim(prov_dispensing_id) END AS prov_dispensing_id,
CASE WHEN trim(prov_dispensing_qual) == '' THEN NULL ELSE trim(prov_dispensing_qual) END AS prov_dispensing_qual,
CASE WHEN trim(prov_prescribing_id) == '' THEN NULL ELSE trim(prov_prescribing_id) END AS prov_prescribing_id,
CASE WHEN trim(prov_prescribing_qual) == '' THEN NULL ELSE trim(prov_prescribing_qual) END AS prov_prescribing_qual,
CASE WHEN trim(prov_primary_care_id) == '' THEN NULL ELSE trim(prov_primary_care_id) END AS prov_primary_care_id,
CASE WHEN trim(prov_primary_care_qual) == '' THEN NULL ELSE trim(prov_primary_care_qual) END AS prov_primary_care_qual,
CASE WHEN trim(other_payer_coverage_type) == '' THEN NULL ELSE trim(other_payer_coverage_type) END AS other_payer_coverage_type,
CASE WHEN trim(other_payer_coverage_id) == '' THEN NULL ELSE trim(other_payer_coverage_id) END AS other_payer_coverage_id,
CASE WHEN trim(other_payer_coverage_qual) == '' THEN NULL ELSE trim(other_payer_coverage_qual) END AS other_payer_coverage_qual,
extract_date(other_payer_date, '%Y-%m-%d', cast({min_date} as date), cast({max_date} as date)),
CASE WHEN trim(other_payer_coverage_code) == '' THEN NULL ELSE trim(other_payer_coverage_code) END AS other_payer_coverage_code,
CASE WHEN trim(logical_delete_reason) == '' THEN NULL ELSE trim(logical_delete_reason) END AS logical_delete_reason
FROM normalized_claims;
