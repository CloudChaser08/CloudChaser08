import pytest
from pyspark.sql import Row
import datetime
import spark.providers.pdx.pharmacyclaims.sparkNormalizePDX as pdx


@pytest.mark.usefixtures("spark")
def test_init(spark):
    """
    Run the normalization routine and gather results
    """
    spark['spark'].sparkContext.parallelize([
        Row(
            hvm_vdr_feed_id=pdx.FEED_ID,
            gen_ref_domn_nm='EARLIEST_VALID_SERVICE_DATE',
            gen_ref_itm_nm='',
            gen_ref_1_dt=datetime.date(1901, 1, 1),
            whtlst_flg=''
        )
    ]).toDF().createOrReplaceTempView('ref_gen_ref')

    spark['spark'].sparkContext.parallelize([
        Row(
            claim_id='',
            record_id='',
            hvid='',
            created=datetime.date(2019, 1, 15),
            model_version='',
            data_set='',
            data_feed='',
            data_vendor='',
            source_version='',
            patient_gender='',
            patient_age='',
            patient_year_of_birth='',
            patient_zip3='',
            patient_state='',
            date_service=datetime.date(2019, 1, 15),
            date_written=datetime.date(2019, 1, 15),
            year_of_injury='',
            date_authorized=datetime.date(2019, 1, 15),
            time_authorized='',
            discharge_date=datetime.date(2019, 1, 15),
            transaction_code_std='',
            transaction_code_vendor='',
            response_code_std='',
            response_code_vendor='',
            reject_reason_code_1='',
            reject_reason_code_2='',
            reject_reason_code_3='',
            reject_reason_code_4='',
            reject_reason_code_5='',
            diagnosis_code='',
            diagnosis_code_qual='',
            procedure_code='',
            procedure_code_qual='',
            ndc_code='',
            product_service_id='',
            product_service_id_qual='',
            rx_number='',
            rx_number_qual='',
            bin_number='',
            processor_control_number='',
            fill_number=1,
            refill_auth_amount='',
            dispensed_quantity=1.0,
            unit_of_measure='',
            days_supply=1,
            pharmacy_npi='',
            prov_dispensing_npi='',
            payer_id='',
            payer_id_qual='',
            payer_name='',
            payer_parent_name='',
            payer_org_name='',
            payer_plan_id='',
            payer_plan_name='',
            payer_type='',
            compound_code='',
            unit_dose_indicator='',
            dispensed_as_written='',
            prescription_origin='',
            submission_clarification='',
            orig_prescribed_product_service_code='',
            orig_prescribed_product_service_code_qual='',
            orig_prescribed_quantity='',
            prior_auth_type_code='',
            level_of_service='',
            reason_for_service='',
            professional_service_code='',
            result_of_service_code='',
            prov_prescribing_npi='',
            prov_prescribing_tax_id='',
            prov_prescribing_dea_id='',
            prov_prescribing_ssn='',
            prov_prescribing_state_license='',
            prov_prescribing_upin='',
            prov_prescribing_commercial_id='',
            prov_prescribing_name_1='',
            prov_prescribing_name_2='',
            prov_prescribing_address_1='',
            prov_prescribing_address_2='',
            prov_prescribing_city='',
            prov_prescribing_state='',
            prov_prescribing_zip='',
            prov_prescribing_std_taxonomy='',
            prov_prescribing_vendor_specialty='',
            prov_primary_care_npi='',
            cob_count='',
            usual_and_customary_charge=1.0,
            product_selection_attributed=1.0,
            other_payer_recognized=1.0,
            periodic_deductible_applied=1.0,
            periodic_benefit_exceed=1.0,
            accumulated_deductible=1.0,
            remaining_deductible=1.0,
            remaining_benefit=1.0,
            copay_coinsurance=1.0,
            basis_of_cost_determination=1.0,
            submitted_ingredient_cost=1.0,
            submitted_dispensing_fee=1.0,
            submitted_incentive=1.0,
            submitted_gross_due=1.0,
            submitted_professional_service_fee=1.0,
            submitted_patient_pay=1.0,
            submitted_other_claimed_qual=1.0,
            submitted_other_claimed=1.0,
            basis_of_reimbursement_determination=1.0,
            paid_ingredient_cost=1.0,
            paid_dispensing_fee=1.0,
            paid_incentive=1.0,
            paid_gross_due=1.0,
            paid_professional_service_fee=1.0,
            paid_patient_pay=1.0,
            paid_other_claimed_qual=1.0,
            paid_other_claimed=1.0,
            tax_exempt_indicator='',
            coupon_type='',
            coupon_number='',
            coupon_value=1.0,
            pharmacy_other_id='',
            pharmacy_other_qual='',
            pharmacy_postal_code='',
            prov_dispensing_id='',
            prov_dispensing_qual='',
            prov_prescribing_id='',
            prov_prescribing_qual='',
            prov_primary_care_id='',
            prov_primary_care_qual='',
            other_payer_coverage_type='',
            other_payer_coverage_id='',
            other_payer_coverage_qual='',
            other_payer_date=datetime.date(2019, 1, 15),
            other_payer_coverage_code='',
            logical_delete_reason='',
            logical_delete_reason_date=datetime.date(2019, 1, 15),
            part_provider='',
            part_best_date=''
        )
    ]).toDF().createOrReplaceTempView('_temp_pharmacyclaims_nb')
    
    pdx.run(spark['spark'], spark['runner'], '2019-01-15', test=True)

